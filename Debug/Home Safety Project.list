
Home Safety Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006188  08006188  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006190  08006190  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000070  08006208  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08006208  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011eaf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe6  00000000  00000000  00031f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00033f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00034f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218fb  00000000  00000000  00035ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f78  00000000  00000000  000577eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7b9c  00000000  00000000  0006a763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001422ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004998  00000000  00000000  00142350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060d0 	.word	0x080060d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080060d0 	.word	0x080060d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <convertADCtoCO2.0>:
  uint32_t co2Level;



  // Convert ADC value to CO2 level using calibration equation obtained from MQ-135 Datasheet
  float convertADCtoCO2(uint32_t adcValue) {
 8000584:	b480      	push	{r7}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	f8c7 c000 	str.w	ip, [r7]
  // Calibration curve coefficients
	float calibrationCoefficientA = 0.0123;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <convertADCtoCO2.0+0x7c>)
 8000592:	61fb      	str	r3, [r7, #28]
	float calibrationCoefficientB = 0.4567;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <convertADCtoCO2.0+0x80>)
 8000596:	61bb      	str	r3, [r7, #24]
	float calibrationCoefficientC = 0.8901;
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <convertADCtoCO2.0+0x84>)
 800059a:	617b      	str	r3, [r7, #20]
    float voltage = (float)adcValue * 5 / 4096;  // Convert ADC value to voltage (12-bit ADC)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	ee07 3a90 	vmov	s15, r3
 80005a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005a6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80005aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005ae:	eddf 6a17 	vldr	s13, [pc, #92]	; 800060c <convertADCtoCO2.0+0x88>
 80005b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005b6:	edc7 7a04 	vstr	s15, [r7, #16]
    float co2Level = calibrationCoefficientA * voltage * voltage + calibrationCoefficientB * voltage + calibrationCoefficientC;
 80005ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80005be:	edd7 7a04 	vldr	s15, [r7, #16]
 80005c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80005ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80005d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80005d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005de:	ed97 7a05 	vldr	s14, [r7, #20]
 80005e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005e6:	edc7 7a03 	vstr	s15, [r7, #12]
    return co2Level;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	ee07 3a90 	vmov	s15, r3
  }
 80005f0:	eeb0 0a67 	vmov.f32	s0, s15
 80005f4:	3724      	adds	r7, #36	; 0x24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	3c4985f0 	.word	0x3c4985f0
 8000604:	3ee9d495 	.word	0x3ee9d495
 8000608:	3f63dd98 	.word	0x3f63dd98
 800060c:	45800000 	.word	0x45800000

08000610 <main>:
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b09c      	sub	sp, #112	; 0x70
 8000614:	af00      	add	r7, sp, #0
int main(void)
 8000616:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_Init();
 800061c:	f000 fd57 	bl	80010ce <HAL_Init>
  SystemClock_Config();
 8000620:	f000 f8e0 	bl	80007e4 <SystemClock_Config>
  MX_GPIO_Init();
 8000624:	f000 fae8 	bl	8000bf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000628:	f000 fab6 	bl	8000b98 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800062c:	f000 f990 	bl	8000950 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000630:	f000 f92a 	bl	8000888 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000634:	f000 fa38 	bl	8000aa8 <MX_TIM2_Init>
  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000638:	2100      	movs	r1, #0
 800063a:	4862      	ldr	r0, [pc, #392]	; (80007c4 <main+0x1b4>)
 800063c:	f003 fcae 	bl	8003f9c <HAL_TIM_PWM_Start>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <main+0x3a>
     Error_Handler();
 8000646:	f000 fb23 	bl	8000c90 <Error_Handler>
  if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 800064a:	2100      	movs	r1, #0
 800064c:	485e      	ldr	r0, [pc, #376]	; (80007c8 <main+0x1b8>)
 800064e:	f003 fca5 	bl	8003f9c <HAL_TIM_PWM_Start>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <main+0x4c>
       Error_Handler();
 8000658:	f000 fb1a 	bl	8000c90 <Error_Handler>
  uint8_t water_detected_message[] = "Water Detected\r\n";
 800065c:	4b5b      	ldr	r3, [pc, #364]	; (80007cc <main+0x1bc>)
 800065e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000662:	461d      	mov	r5, r3
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	682b      	ldr	r3, [r5, #0]
 800066a:	7023      	strb	r3, [r4, #0]
  int pwm_servo_water = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	66fb      	str	r3, [r7, #108]	; 0x6c
  int pwm_servo_gas = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	66bb      	str	r3, [r7, #104]	; 0x68
  int danger_water = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	667b      	str	r3, [r7, #100]	; 0x64
  int danger_gas = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t adcValue = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	65fb      	str	r3, [r7, #92]	; 0x5c
  int i = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	65bb      	str	r3, [r7, #88]	; 0x58


	        // Poll ADC

	  	  // Start ADC Conversion
	  	    if(HAL_ADC_Start(&hadc1) != HAL_OK) // Starts the ADC Conversion
 8000684:	4852      	ldr	r0, [pc, #328]	; (80007d0 <main+0x1c0>)
 8000686:	f001 f919 	bl	80018bc <HAL_ADC_Start>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <main+0x84>
	  	    {
	  	      Error_Handler();
 8000690:	f000 fafe 	bl	8000c90 <Error_Handler>
	  	    }

	  	    // Poll ADC
	  	    if(HAL_ADC_PollForConversion(&hadc1, 300) == HAL_OK)
 8000694:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000698:	484d      	ldr	r0, [pc, #308]	; (80007d0 <main+0x1c0>)
 800069a:	f001 f9a5 	bl	80019e8 <HAL_ADC_PollForConversion>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d103      	bne.n	80006ac <main+0x9c>
	  	    {
	  	      // Get the converted value
	  	      adcValue = HAL_ADC_GetValue(&hadc1);
 80006a4:	484a      	ldr	r0, [pc, #296]	; (80007d0 <main+0x1c0>)
 80006a6:	f001 fa2e 	bl	8001b06 <HAL_ADC_GetValue>
 80006aa:	65f8      	str	r0, [r7, #92]	; 0x5c
	  	    }

	        HAL_Delay(100);
 80006ac:	2064      	movs	r0, #100	; 0x64
 80006ae:	f000 fd83 	bl	80011b8 <HAL_Delay>

	        if(HAL_ADC_Stop(&hadc1) != HAL_OK)
 80006b2:	4847      	ldr	r0, [pc, #284]	; (80007d0 <main+0x1c0>)
 80006b4:	f001 f965 	bl	8001982 <HAL_ADC_Stop>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <main+0xb2>
	        {
	          // Stop ADC Conversion
	          Error_Handler();
 80006be:	f000 fae7 	bl	8000c90 <Error_Handler>
	        }

	        co2Level = (uint32_t)convertADCtoCO2(adcValue);
 80006c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006c6:	469c      	mov	ip, r3
 80006c8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80006ca:	f7ff ff5b 	bl	8000584 <convertADCtoCO2.0>
 80006ce:	eef0 7a40 	vmov.f32	s15, s0
 80006d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d6:	ee17 3a90 	vmov	r3, s15
 80006da:	657b      	str	r3, [r7, #84]	; 0x54
	        // Print the ADC value to the string
	        int len = sprintf(adcValueStr, "%lu\r\n", adcValue); // "%lu" is the format specifier for
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006e2:	493c      	ldr	r1, [pc, #240]	; (80007d4 <main+0x1c4>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f005 f885 	bl	80057f4 <siprintf>
 80006ea:	6538      	str	r0, [r7, #80]	; 0x50

	        // Delay to prevent high CPU usage
	        HAL_Delay(600);
 80006ec:	f44f 7016 	mov.w	r0, #600	; 0x258
 80006f0:	f000 fd62 	bl	80011b8 <HAL_Delay>



	        GPIO_PinState Water = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f002 f9e3 	bl	8002ac4 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	        if(Water == GPIO_PIN_SET)
 8000704:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000708:	2b01      	cmp	r3, #1
 800070a:	d105      	bne.n	8000718 <main+0x108>
	        {
	            danger_water = 1;
 800070c:	2301      	movs	r3, #1
 800070e:	667b      	str	r3, [r7, #100]	; 0x64
	            pwm_servo_water = PULSE_LEFT;			//5% Duty Cycle, (1 ms pulse --> position is all the way to the right)
 8000710:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000714:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000716:	e004      	b.n	8000722 <main+0x112>
	        }
	        else
	        {
	        	pwm_servo_water = PULSE_RIGHT;
 8000718:	f640 2328 	movw	r3, #2600	; 0xa28
 800071c:	66fb      	str	r3, [r7, #108]	; 0x6c
	        	danger_water = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	667b      	str	r3, [r7, #100]	; 0x64
//	            HAL_Delay(2000);
	        }
	        if(adcValue>1000)
 8000722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000728:	d905      	bls.n	8000736 <main+0x126>
	        {
	        	danger_gas = 1;
 800072a:	2301      	movs	r3, #1
 800072c:	663b      	str	r3, [r7, #96]	; 0x60
	        	pwm_servo_gas = PULSE_LEFT;			//5% Duty Cycle, (1 ms pulse --> position is all the way to the right)
 800072e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000732:	66bb      	str	r3, [r7, #104]	; 0x68
 8000734:	e004      	b.n	8000740 <main+0x130>
	        }
	        else
	        {
	        	danger_gas = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	663b      	str	r3, [r7, #96]	; 0x60
	        	pwm_servo_gas = PULSE_RIGHT;
 800073a:	f640 2328 	movw	r3, #2600	; 0xa28
 800073e:	66bb      	str	r3, [r7, #104]	; 0x68
	        }

	        if(danger_water || danger_gas)
 8000740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000742:	2b00      	cmp	r3, #0
 8000744:	d102      	bne.n	800074c <main+0x13c>
 8000746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000748:	2b00      	cmp	r3, #0
 800074a:	d00a      	beq.n	8000762 <main+0x152>
	        {
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2102      	movs	r1, #2
 8000750:	4821      	ldr	r0, [pc, #132]	; (80007d8 <main+0x1c8>)
 8000752:	f002 f9cf 	bl	8002af4 <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2120      	movs	r1, #32
 800075a:	481f      	ldr	r0, [pc, #124]	; (80007d8 <main+0x1c8>)
 800075c:	f002 f9ca 	bl	8002af4 <HAL_GPIO_WritePin>
 8000760:	e009      	b.n	8000776 <main+0x166>
	        }
	        else
	        {
	        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2102      	movs	r1, #2
 8000766:	481c      	ldr	r0, [pc, #112]	; (80007d8 <main+0x1c8>)
 8000768:	f002 f9c4 	bl	8002af4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2120      	movs	r1, #32
 8000770:	4819      	ldr	r0, [pc, #100]	; (80007d8 <main+0x1c8>)
 8000772:	f002 f9bf 	bl	8002af4 <HAL_GPIO_WritePin>
				//10% Duty Cycle, (2 ms pulse --> position is all the way to the left)
	        }

	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_servo_water);
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <main+0x1b4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
	        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_servo_gas);
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <main+0x1b8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000784:	635a      	str	r2, [r3, #52]	; 0x34

	        // Send the ADC value via UART
	        HAL_UART_Transmit(&huart2, (uint8_t*)adcValueStr, len, HAL_MAX_DELAY);
 8000786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000788:	b29a      	uxth	r2, r3
 800078a:	f107 0110 	add.w	r1, r7, #16
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	4812      	ldr	r0, [pc, #72]	; (80007dc <main+0x1cc>)
 8000794:	f004 fb8c 	bl	8004eb0 <HAL_UART_Transmit>

	        char i_str[12]; // Buffer for string representation of i
	        sprintf(i_str, "%d\r\n", i); // Convert i to string
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800079c:	4910      	ldr	r1, [pc, #64]	; (80007e0 <main+0x1d0>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f005 f828 	bl	80057f4 <siprintf>
	        HAL_UART_Transmit(&huart2, (uint8_t*)i_str, strlen(i_str), HAL_MAX_DELAY); // Transmit i
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fd12 	bl	80001d0 <strlen>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	4809      	ldr	r0, [pc, #36]	; (80007dc <main+0x1cc>)
 80007b8:	f004 fb7a 	bl	8004eb0 <HAL_UART_Transmit>
	        i++;
 80007bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007be:	3301      	adds	r3, #1
 80007c0:	65bb      	str	r3, [r7, #88]	; 0x58
  {
 80007c2:	e75f      	b.n	8000684 <main+0x74>
 80007c4:	200000f0 	.word	0x200000f0
 80007c8:	2000013c 	.word	0x2000013c
 80007cc:	080060f8 	.word	0x080060f8
 80007d0:	2000008c 	.word	0x2000008c
 80007d4:	080060e8 	.word	0x080060e8
 80007d8:	48000400 	.word	0x48000400
 80007dc:	20000188 	.word	0x20000188
 80007e0:	080060f0 	.word	0x080060f0

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b096      	sub	sp, #88	; 0x58
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2244      	movs	r2, #68	; 0x44
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 fff6 	bl	80057e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	463b      	mov	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000806:	f44f 7000 	mov.w	r0, #512	; 0x200
 800080a:	f002 f999 	bl	8002b40 <HAL_PWREx_ControlVoltageScaling>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000814:	f000 fa3c 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000818:	2310      	movs	r3, #16
 800081a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000824:	2360      	movs	r3, #96	; 0x60
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	2302      	movs	r3, #2
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800082c:	2301      	movs	r3, #1
 800082e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000834:	2310      	movs	r3, #16
 8000836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000838:	2307      	movs	r3, #7
 800083a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4618      	mov	r0, r3
 800084a:	f002 f9cf 	bl	8002bec <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000854:	f000 fa1c 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	2303      	movs	r3, #3
 800085e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	2101      	movs	r1, #1
 8000870:	4618      	mov	r0, r3
 8000872:	f002 fdcf 	bl	8003414 <HAL_RCC_ClockConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800087c:	f000 fa08 	bl	8000c90 <Error_Handler>
  }
}
 8000880:	bf00      	nop
 8000882:	3758      	adds	r7, #88	; 0x58
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <MX_ADC1_Init+0xc0>)
 80008a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008be:	2204      	movs	r2, #4
 80008c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_ADC1_Init+0xbc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fe:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_ADC1_Init+0xbc>)
 8000900:	f000 fe94 	bl	800162c <HAL_ADC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800090a:	f000 f9c1 	bl	8000c90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_ADC1_Init+0xc4>)
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000912:	2306      	movs	r3, #6
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800091a:	237f      	movs	r3, #127	; 0x7f
 800091c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800091e:	2304      	movs	r3, #4
 8000920:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <MX_ADC1_Init+0xbc>)
 800092c:	f001 f8f8 	bl	8001b20 <HAL_ADC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000936:	f000 f9ab 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000008c 	.word	0x2000008c
 8000948:	50040000 	.word	0x50040000
 800094c:	21800100 	.word	0x21800100

08000950 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b09a      	sub	sp, #104	; 0x68
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000970:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	222c      	movs	r2, #44	; 0x2c
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f004 ff2a 	bl	80057e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000990:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <MX_TIM1_Init+0x150>)
 8000992:	4a44      	ldr	r2, [pc, #272]	; (8000aa4 <MX_TIM1_Init+0x154>)
 8000994:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <MX_TIM1_Init+0x150>)
 8000998:	221f      	movs	r2, #31
 800099a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b40      	ldr	r3, [pc, #256]	; (8000aa0 <MX_TIM1_Init+0x150>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80009a2:	4b3f      	ldr	r3, [pc, #252]	; (8000aa0 <MX_TIM1_Init+0x150>)
 80009a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80009a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <MX_TIM1_Init+0x150>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <MX_TIM1_Init+0x150>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <MX_TIM1_Init+0x150>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009bc:	4838      	ldr	r0, [pc, #224]	; (8000aa0 <MX_TIM1_Init+0x150>)
 80009be:	f003 fa35 	bl	8003e2c <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 f962 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009d6:	4619      	mov	r1, r3
 80009d8:	4831      	ldr	r0, [pc, #196]	; (8000aa0 <MX_TIM1_Init+0x150>)
 80009da:	f003 fcd1 	bl	8004380 <HAL_TIM_ConfigClockSource>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009e4:	f000 f954 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009e8:	482d      	ldr	r0, [pc, #180]	; (8000aa0 <MX_TIM1_Init+0x150>)
 80009ea:	f003 fa76 	bl	8003eda <HAL_TIM_PWM_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009f4:	f000 f94c 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4825      	ldr	r0, [pc, #148]	; (8000aa0 <MX_TIM1_Init+0x150>)
 8000a0c:	f004 f924 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a16:	f000 f93b 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1a:	2360      	movs	r3, #96	; 0x60
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a22:	2300      	movs	r3, #0
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a26:	2300      	movs	r3, #0
 8000a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <MX_TIM1_Init+0x150>)
 8000a40:	f003 fb8a 	bl	8004158 <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a4a:	f000 f921 	bl	8000c90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <MX_TIM1_Init+0x150>)
 8000a84:	f004 f94e 	bl	8004d24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a8e:	f000 f8ff 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <MX_TIM1_Init+0x150>)
 8000a94:	f000 f9bc 	bl	8000e10 <HAL_TIM_MspPostInit>

}
 8000a98:	bf00      	nop
 8000a9a:	3768      	adds	r7, #104	; 0x68
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000f0 	.word	0x200000f0
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000adc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000ae4:	221f      	movs	r2, #31
 8000ae6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000af0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000af4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b02:	4824      	ldr	r0, [pc, #144]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b04:	f003 f992 	bl	8003e2c <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b0e:	f000 f8bf 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481d      	ldr	r0, [pc, #116]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b20:	f003 fc2e 	bl	8004380 <HAL_TIM_ConfigClockSource>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b2a:	f000 f8b1 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b2e:	4819      	ldr	r0, [pc, #100]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b30:	f003 f9d3 	bl	8003eda <HAL_TIM_PWM_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b3a:	f000 f8a9 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4811      	ldr	r0, [pc, #68]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b4e:	f004 f883 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b58:	f000 f89a 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5c:	2360      	movs	r3, #96	; 0x60
 8000b5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8000b60:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000b64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	4619      	mov	r1, r3
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b76:	f003 faef 	bl	8004158 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000b80:	f000 f886 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b86:	f000 f943 	bl	8000e10 <HAL_TIM_MspPostInit>

}
 8000b8a:	bf00      	nop
 8000b8c:	3738      	adds	r7, #56	; 0x38
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000013c 	.word	0x2000013c

08000b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000b9e:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <MX_USART2_UART_Init+0x5c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bdc:	f004 f91a 	bl	8004e14 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000be6:	f000 f853 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000188 	.word	0x20000188
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|LD3_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	212a      	movs	r1, #42	; 0x2a
 8000c42:	4812      	ldr	r0, [pc, #72]	; (8000c8c <MX_GPIO_Init+0x94>)
 8000c44:	f001 ff56 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c48:	2340      	movs	r3, #64	; 0x40
 8000c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5e:	f001 fdc7 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LD3_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD3_Pin|GPIO_PIN_5;
 8000c62:	232a      	movs	r3, #42	; 0x2a
 8000c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_GPIO_Init+0x94>)
 8000c7a:	f001 fdb9 	bl	80027f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7e:	bf00      	nop
 8000c80:	3720      	adds	r7, #32
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	48000400 	.word	0x48000400

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6613      	str	r3, [r2, #96]	; 0x60
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b09e      	sub	sp, #120	; 0x78
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	2254      	movs	r2, #84	; 0x54
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fd6d 	bl	80057e4 <memset>
  if(hadc->Instance==ADC1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a25      	ldr	r2, [pc, #148]	; (8000da4 <HAL_ADC_MspInit+0xc0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d143      	bne.n	8000d9c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d1e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d20:	2301      	movs	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 fd8a 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000d4e:	f7ff ff9f 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_ADC_MspInit+0xc4>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <HAL_ADC_MspInit+0xc4>)
 8000d58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_ADC_MspInit+0xc4>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_ADC_MspInit+0xc4>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <HAL_ADC_MspInit+0xc4>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_ADC_MspInit+0xc4>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d82:	2308      	movs	r3, #8
 8000d84:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d86:	230b      	movs	r3, #11
 8000d88:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f001 fd2a 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3778      	adds	r7, #120	; 0x78
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	50040000 	.word	0x50040000
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <HAL_TIM_Base_MspInit+0x5c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_TIM_Base_MspInit+0x60>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <HAL_TIM_Base_MspInit+0x60>)
 8000dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_TIM_Base_MspInit+0x60>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dd6:	e010      	b.n	8000dfa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de0:	d10b      	bne.n	8000dfa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_TIM_Base_MspInit+0x60>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_TIM_Base_MspInit+0x60>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_TIM_Base_MspInit+0x60>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40012c00 	.word	0x40012c00
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_TIM_MspPostInit+0xac>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d11e      	bne.n	8000e70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_TIM_MspPostInit+0xb0>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <HAL_TIM_MspPostInit+0xb0>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_TIM_MspPostInit+0xb0>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f001 fcc1 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e6e:	e021      	b.n	8000eb4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e78:	d11c      	bne.n	8000eb4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_TIM_MspPostInit+0xb0>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <HAL_TIM_MspPostInit+0xb0>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_TIM_MspPostInit+0xb0>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e92:	2301      	movs	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f001 fc9e 	bl	80027f0 <HAL_GPIO_Init>
}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40012c00 	.word	0x40012c00
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b09e      	sub	sp, #120	; 0x78
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2254      	movs	r2, #84	; 0x54
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 fc7d 	bl	80057e4 <memset>
  if(huart->Instance==USART2)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <HAL_UART_MspInit+0xcc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d148      	bne.n	8000f86 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 fcab 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f0c:	f7ff fec0 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_UART_MspInit+0xd0>)
 8000f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f14:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <HAL_UART_MspInit+0xd0>)
 8000f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_UART_MspInit+0xd0>)
 8000f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_UART_MspInit+0xd0>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <HAL_UART_MspInit+0xd0>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_UART_MspInit+0xd0>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f40:	2304      	movs	r3, #4
 8000f42:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f50:	2307      	movs	r3, #7
 8000f52:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f001 fc47 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f74:	2303      	movs	r3, #3
 8000f76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f82:	f001 fc35 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3778      	adds	r7, #120	; 0x78
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40004400 	.word	0x40004400
 8000f94:	40021000 	.word	0x40021000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f8c8 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f004 fbb8 	bl	8005790 <__errno>
 8001020:	4603      	mov	r3, r0
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20010000 	.word	0x20010000
 800104c:	00000400 	.word	0x00000400
 8001050:	2000020c 	.word	0x2000020c
 8001054:	20000228 	.word	0x20000228

08001058 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001080:	f7ff ffea 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010aa:	f004 fb77 	bl	800579c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ae:	f7ff faaf 	bl	8000610 <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010c0:	08006198 	.word	0x08006198
  ldr r2, =_sbss
 80010c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010c8:	20000224 	.word	0x20000224

080010cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_IRQHandler>

080010ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f001 fb55 	bl	8002788 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f80e 	bl	8001100 <HAL_InitTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	e001      	b.n	80010f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f0:	f7ff fdd4 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_InitTick+0x6c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d023      	beq.n	800115c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_InitTick+0x70>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_InitTick+0x6c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fb53 	bl	80027d6 <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10f      	bne.n	8001156 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d809      	bhi.n	8001150 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f001 fb2b 	bl	800279e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_InitTick+0x74>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e007      	b.n	8001160 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e004      	b.n	8001160 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e001      	b.n	8001160 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	20000000 	.word	0x20000000
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	20000210 	.word	0x20000210

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000210 	.word	0x20000210

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008

08001200 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	609a      	str	r2, [r3, #8]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3360      	adds	r3, #96	; 0x60
 800127a:	461a      	mov	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <LL_ADC_SetOffset+0x44>)
 800128a:	4013      	ands	r3, r2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	4313      	orrs	r3, r2
 8001298:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	03fff000 	.word	0x03fff000

080012b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3360      	adds	r3, #96	; 0x60
 80012be:	461a      	mov	r2, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3360      	adds	r3, #96	; 0x60
 80012ec:	461a      	mov	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	431a      	orrs	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001306:	bf00      	nop
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3330      	adds	r3, #48	; 0x30
 8001348:	461a      	mov	r2, r3
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	4413      	add	r3, r2
 8001356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	211f      	movs	r1, #31
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	401a      	ands	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	0e9b      	lsrs	r3, r3, #26
 8001370:	f003 011f 	and.w	r1, r3, #31
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	431a      	orrs	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001384:	bf00      	nop
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3314      	adds	r3, #20
 80013a0:	461a      	mov	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	0e5b      	lsrs	r3, r3, #25
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	0d1b      	lsrs	r3, r3, #20
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	2107      	movs	r1, #7
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	401a      	ands	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	0d1b      	lsrs	r3, r3, #20
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	431a      	orrs	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013da:	bf00      	nop
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0318 	and.w	r3, r3, #24
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <LL_ADC_SetChannelSingleDiff+0x44>)
 800140c:	40d9      	lsrs	r1, r3
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	400b      	ands	r3, r1
 8001412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001416:	431a      	orrs	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	0007ffff 	.word	0x0007ffff

08001430 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6093      	str	r3, [r2, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001468:	d101      	bne.n	800146e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800148c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001490:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014b8:	d101      	bne.n	80014be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001504:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001508:	f043 0202 	orr.w	r2, r3, #2
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <LL_ADC_IsEnabled+0x18>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <LL_ADC_IsEnabled+0x1a>
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b02      	cmp	r3, #2
 8001554:	d101      	bne.n	800155a <LL_ADC_IsDisableOngoing+0x18>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <LL_ADC_IsDisableOngoing+0x1a>
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800157c:	f043 0204 	orr.w	r2, r3, #4
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a4:	f043 0210 	orr.w	r2, r3, #16
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d101      	bne.n	80015d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015f2:	f043 0220 	orr.w	r2, r3, #32
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b08      	cmp	r3, #8
 8001618:	d101      	bne.n	800161e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e12c      	b.n	80018a0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001650:	2b00      	cmp	r3, #0
 8001652:	d109      	bne.n	8001668 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fb45 	bl	8000ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fef1 	bl	8001454 <LL_ADC_IsDeepPowerDownEnabled>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fed7 	bl	8001430 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff0c 	bl	80014a4 <LL_ADC_IsInternalRegulatorEnabled>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d115      	bne.n	80016be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fef0 	bl	800147c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800169c:	4b82      	ldr	r3, [pc, #520]	; (80018a8 <HAL_ADC_Init+0x27c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	099b      	lsrs	r3, r3, #6
 80016a2:	4a82      	ldr	r2, [pc, #520]	; (80018ac <HAL_ADC_Init+0x280>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	3301      	adds	r3, #1
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f9      	bne.n	80016b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff feee 	bl	80014a4 <LL_ADC_IsInternalRegulatorEnabled>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10d      	bne.n	80016ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	f043 0210 	orr.w	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff62 	bl	80015b8 <LL_ADC_REG_IsConversionOngoing>
 80016f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 80c5 	bne.w	800188e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f040 80c1 	bne.w	800188e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001714:	f043 0202 	orr.w	r2, r3, #2
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fefb 	bl	800151c <LL_ADC_IsEnabled>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10b      	bne.n	8001744 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800172c:	4860      	ldr	r0, [pc, #384]	; (80018b0 <HAL_ADC_Init+0x284>)
 800172e:	f7ff fef5 	bl	800151c <LL_ADC_IsEnabled>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4619      	mov	r1, r3
 800173e:	485d      	ldr	r0, [pc, #372]	; (80018b4 <HAL_ADC_Init+0x288>)
 8001740:	f7ff fd5e 	bl	8001200 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7e5b      	ldrb	r3, [r3, #25]
 8001748:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800174e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001754:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800175a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001762:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d106      	bne.n	8001780 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	3b01      	subs	r3, #1
 8001778:	045b      	lsls	r3, r3, #17
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	4b45      	ldr	r3, [pc, #276]	; (80018b8 <HAL_ADC_Init+0x28c>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	69b9      	ldr	r1, [r7, #24]
 80017ac:	430b      	orrs	r3, r1
 80017ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff feff 	bl	80015b8 <LL_ADC_REG_IsConversionOngoing>
 80017ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff20 	bl	8001606 <LL_ADC_INJ_IsConversionOngoing>
 80017c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d13d      	bne.n	800184a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d13a      	bne.n	800184a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017d8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017e0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017f0:	f023 0302 	bic.w	r3, r3, #2
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	69b9      	ldr	r1, [r7, #24]
 80017fa:	430b      	orrs	r3, r1
 80017fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001804:	2b01      	cmp	r3, #1
 8001806:	d118      	bne.n	800183a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001812:	f023 0304 	bic.w	r3, r3, #4
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800181e:	4311      	orrs	r1, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001824:	4311      	orrs	r1, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800182a:	430a      	orrs	r2, r1
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	e007      	b.n	800184a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0201 	bic.w	r2, r2, #1
 8001848:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10c      	bne.n	800186c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f023 010f 	bic.w	r1, r3, #15
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
 800186a:	e007      	b.n	800187c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 020f 	bic.w	r2, r2, #15
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001880:	f023 0303 	bic.w	r3, r3, #3
 8001884:	f043 0201 	orr.w	r2, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	655a      	str	r2, [r3, #84]	; 0x54
 800188c:	e007      	b.n	800189e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	f043 0210 	orr.w	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800189e:	7ffb      	ldrb	r3, [r7, #31]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000000 	.word	0x20000000
 80018ac:	053e2d63 	.word	0x053e2d63
 80018b0:	50040000 	.word	0x50040000
 80018b4:	50040300 	.word	0x50040300
 80018b8:	fff0c007 	.word	0xfff0c007

080018bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fe75 	bl	80015b8 <LL_ADC_REG_IsConversionOngoing>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d14f      	bne.n	8001974 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_Start+0x26>
 80018de:	2302      	movs	r3, #2
 80018e0:	e04b      	b.n	800197a <HAL_ADC_Start+0xbe>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 fdb4 	bl	8002458 <ADC_Enable>
 80018f0:	4603      	mov	r3, r0
 80018f2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d137      	bne.n	800196a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800191a:	d106      	bne.n	800192a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001920:	f023 0206 	bic.w	r2, r3, #6
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	659a      	str	r2, [r3, #88]	; 0x58
 8001928:	e002      	b.n	8001930 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	221c      	movs	r2, #28
 8001936:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001952:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001956:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fe00 	bl	8001568 <LL_ADC_REG_StartConversion>
 8001968:	e006      	b.n	8001978 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001972:	e001      	b.n	8001978 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001974:	2302      	movs	r3, #2
 8001976:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_ADC_Stop+0x16>
 8001994:	2302      	movs	r3, #2
 8001996:	e023      	b.n	80019e0 <HAL_ADC_Stop+0x5e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80019a0:	2103      	movs	r1, #3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fc9c 	bl	80022e0 <ADC_ConversionStop>
 80019a8:	4603      	mov	r3, r0
 80019aa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d111      	bne.n	80019d6 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fdd6 	bl	8002564 <ADC_Disable>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d109      	bne.n	80019d6 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ca:	f023 0301 	bic.w	r3, r3, #1
 80019ce:	f043 0201 	orr.w	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d102      	bne.n	8001a00 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019fa:	2308      	movs	r3, #8
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e010      	b.n	8001a22 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a12:	f043 0220 	orr.w	r2, r3, #32
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06f      	b.n	8001afe <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001a1e:	2304      	movs	r3, #4
 8001a20:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a22:	f7ff fbbd 	bl	80011a0 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a28:	e021      	b.n	8001a6e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d01d      	beq.n	8001a6e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a32:	f7ff fbb5 	bl	80011a0 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d302      	bcc.n	8001a48 <HAL_ADC_PollForConversion+0x60>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d112      	bne.n	8001a6e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10b      	bne.n	8001a6e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5a:	f043 0204 	orr.w	r2, r3, #4
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e047      	b.n	8001afe <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0d6      	beq.n	8001a2a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fc40 	bl	8001312 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01c      	beq.n	8001ad2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7e5b      	ldrb	r3, [r3, #25]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d118      	bne.n	8001ad2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d111      	bne.n	8001ad2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d105      	bne.n	8001ad2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d104      	bne.n	8001aea <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e008      	b.n	8001afc <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d103      	bne.n	8001afc <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	220c      	movs	r2, #12
 8001afa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b0b6      	sub	sp, #216	; 0xd8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x22>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e3b9      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x796>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fd32 	bl	80015b8 <LL_ADC_REG_IsConversionOngoing>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 839e 	bne.w	8002298 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d824      	bhi.n	8001bae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	3b02      	subs	r3, #2
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d81b      	bhi.n	8001ba6 <HAL_ADC_ConfigChannel+0x86>
 8001b6e:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <HAL_ADC_ConfigChannel+0x54>)
 8001b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001b8d 	.word	0x08001b8d
 8001b7c:	08001b95 	.word	0x08001b95
 8001b80:	08001b9d 	.word	0x08001b9d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	220c      	movs	r2, #12
 8001b88:	605a      	str	r2, [r3, #4]
          break;
 8001b8a:	e011      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2212      	movs	r2, #18
 8001b90:	605a      	str	r2, [r3, #4]
          break;
 8001b92:	e00d      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2218      	movs	r2, #24
 8001b98:	605a      	str	r2, [r3, #4]
          break;
 8001b9a:	e009      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba2:	605a      	str	r2, [r3, #4]
          break;
 8001ba4:	e004      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2206      	movs	r2, #6
 8001baa:	605a      	str	r2, [r3, #4]
          break;
 8001bac:	e000      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001bae:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f7ff fbbb 	bl	8001338 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fcf6 	bl	80015b8 <LL_ADC_REG_IsConversionOngoing>
 8001bcc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fd16 	bl	8001606 <LL_ADC_INJ_IsConversionOngoing>
 8001bda:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f040 81a6 	bne.w	8001f34 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f040 81a1 	bne.w	8001f34 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f7ff fbc6 	bl	8001390 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d00a      	beq.n	8001c3c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6919      	ldr	r1, [r3, #16]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c36:	f7ff fb17 	bl	8001268 <LL_ADC_SetOffset>
 8001c3a:	e17b      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fb34 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10a      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x148>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fb29 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	0e9b      	lsrs	r3, r3, #26
 8001c62:	f003 021f 	and.w	r2, r3, #31
 8001c66:	e01e      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x186>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fb1e 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001c96:	2320      	movs	r3, #32
 8001c98:	e004      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001c9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x19e>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	e018      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x1d0>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	e004      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ce6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d106      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff faed 	bl	80012dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2101      	movs	r1, #1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fad1 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10a      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x20e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fac6 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	0e9b      	lsrs	r3, r3, #26
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	e01e      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x24c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2101      	movs	r1, #1
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fabb 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e004      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x264>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	0e9b      	lsrs	r3, r3, #26
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	e018      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x296>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001da8:	2320      	movs	r3, #32
 8001daa:	e004      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d106      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fa8a 	bl	80012dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fa6e 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10a      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x2d4>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2102      	movs	r1, #2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fa63 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	f003 021f 	and.w	r2, r3, #31
 8001df2:	e01e      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x312>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fa58 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001e22:	2320      	movs	r3, #32
 8001e24:	e004      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x32a>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0e9b      	lsrs	r3, r3, #26
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	e016      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x358>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	e004      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d106      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	2102      	movs	r1, #2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fa29 	bl	80012dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2103      	movs	r1, #3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fa0d 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10a      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x396>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2103      	movs	r1, #3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fa02 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	0e9b      	lsrs	r3, r3, #26
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	e017      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x3c6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2103      	movs	r1, #3
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff f9f7 	bl	80012b0 <LL_ADC_GetOffsetChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	e003      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d105      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x3de>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	e011      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x402>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e003      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d106      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2103      	movs	r1, #3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f9d4 	bl	80012dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff faef 	bl	800151c <LL_ADC_IsEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f040 813f 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6819      	ldr	r1, [r3, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	461a      	mov	r2, r3
 8001f54:	f7ff fa48 	bl	80013e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4a8e      	ldr	r2, [pc, #568]	; (8002198 <HAL_ADC_ConfigChannel+0x678>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	f040 8130 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10b      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x46c>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	2b09      	cmp	r3, #9
 8001f82:	bf94      	ite	ls
 8001f84:	2301      	movls	r3, #1
 8001f86:	2300      	movhi	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	e019      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x4a0>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f9c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	e003      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001fa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2b09      	cmp	r3, #9
 8001fb8:	bf94      	ite	ls
 8001fba:	2301      	movls	r3, #1
 8001fbc:	2300      	movhi	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d079      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d107      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x4c0>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0e9b      	lsrs	r3, r3, #26
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	069b      	lsls	r3, r3, #26
 8001fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fde:	e015      	b.n	800200c <HAL_ADC_ConfigChannel+0x4ec>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	e003      	b.n	8002004 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	3301      	adds	r3, #1
 8002006:	069b      	lsls	r3, r3, #26
 8002008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_ADC_ConfigChannel+0x50c>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	3301      	adds	r3, #1
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	e017      	b.n	800205c <HAL_ADC_ConfigChannel+0x53c>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800203a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800203c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800203e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002044:	2320      	movs	r3, #32
 8002046:	e003      	b.n	8002050 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	3301      	adds	r3, #1
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	2101      	movs	r1, #1
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	ea42 0103 	orr.w	r1, r2, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x562>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	3301      	adds	r3, #1
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	051b      	lsls	r3, r3, #20
 8002080:	e018      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x594>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800209a:	2320      	movs	r3, #32
 800209c:	e003      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800209e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	3301      	adds	r3, #1
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020b4:	430b      	orrs	r3, r1
 80020b6:	e080      	b.n	80021ba <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x5b4>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	3301      	adds	r3, #1
 80020cc:	069b      	lsls	r3, r3, #26
 80020ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020d2:	e015      	b.n	8002100 <HAL_ADC_ConfigChannel+0x5e0>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80020ec:	2320      	movs	r3, #32
 80020ee:	e003      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	3301      	adds	r3, #1
 80020fa:	069b      	lsls	r3, r3, #26
 80020fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x600>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	3301      	adds	r3, #1
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	2101      	movs	r1, #1
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	e017      	b.n	8002150 <HAL_ADC_ConfigChannel+0x630>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	61fb      	str	r3, [r7, #28]
  return result;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002138:	2320      	movs	r3, #32
 800213a:	e003      	b.n	8002144 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3301      	adds	r3, #1
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	2101      	movs	r1, #1
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	ea42 0103 	orr.w	r1, r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10d      	bne.n	800217c <HAL_ADC_ConfigChannel+0x65c>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0e9b      	lsrs	r3, r3, #26
 8002166:	3301      	adds	r3, #1
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	3b1e      	subs	r3, #30
 8002174:	051b      	lsls	r3, r3, #20
 8002176:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800217a:	e01d      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x698>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	613b      	str	r3, [r7, #16]
  return result;
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d103      	bne.n	800219c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002194:	2320      	movs	r3, #32
 8002196:	e005      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x684>
 8002198:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	f003 021f 	and.w	r2, r3, #31
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	3b1e      	subs	r3, #30
 80021b2:	051b      	lsls	r3, r3, #20
 80021b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b8:	430b      	orrs	r3, r1
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	6892      	ldr	r2, [r2, #8]
 80021be:	4619      	mov	r1, r3
 80021c0:	f7ff f8e6 	bl	8001390 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_ADC_ConfigChannel+0x7a0>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d06c      	beq.n	80022aa <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021d0:	483c      	ldr	r0, [pc, #240]	; (80022c4 <HAL_ADC_ConfigChannel+0x7a4>)
 80021d2:	f7ff f83b 	bl	800124c <LL_ADC_GetCommonPathInternalCh>
 80021d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3a      	ldr	r2, [pc, #232]	; (80022c8 <HAL_ADC_ConfigChannel+0x7a8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d127      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d121      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a35      	ldr	r2, [pc, #212]	; (80022cc <HAL_ADC_ConfigChannel+0x7ac>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d157      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002202:	4619      	mov	r1, r3
 8002204:	482f      	ldr	r0, [pc, #188]	; (80022c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002206:	f7ff f80e 	bl	8001226 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_ADC_ConfigChannel+0x7b0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	4a30      	ldr	r2, [pc, #192]	; (80022d4 <HAL_ADC_ConfigChannel+0x7b4>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002224:	e002      	b.n	800222c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3b01      	subs	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f9      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002232:	e03a      	b.n	80022aa <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <HAL_ADC_ConfigChannel+0x7b8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d113      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x746>
 800223e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10d      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <HAL_ADC_ConfigChannel+0x7ac>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d12a      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225c:	4619      	mov	r1, r3
 800225e:	4819      	ldr	r0, [pc, #100]	; (80022c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002260:	f7fe ffe1 	bl	8001226 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002264:	e021      	b.n	80022aa <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <HAL_ADC_ConfigChannel+0x7bc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d11c      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002270:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d116      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <HAL_ADC_ConfigChannel+0x7ac>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d111      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002286:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800228a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800228e:	4619      	mov	r1, r3
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002292:	f7fe ffc8 	bl	8001226 <LL_ADC_SetCommonPathInternalCh>
 8002296:	e008      	b.n	80022aa <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	37d8      	adds	r7, #216	; 0xd8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	80080000 	.word	0x80080000
 80022c4:	50040300 	.word	0x50040300
 80022c8:	c7520000 	.word	0xc7520000
 80022cc:	50040000 	.word	0x50040000
 80022d0:	20000000 	.word	0x20000000
 80022d4:	053e2d63 	.word	0x053e2d63
 80022d8:	cb840000 	.word	0xcb840000
 80022dc:	80000001 	.word	0x80000001

080022e0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f95e 	bl	80015b8 <LL_ADC_REG_IsConversionOngoing>
 80022fc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff f97f 	bl	8001606 <LL_ADC_INJ_IsConversionOngoing>
 8002308:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d103      	bne.n	8002318 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8098 	beq.w	8002448 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d02a      	beq.n	800237c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7e5b      	ldrb	r3, [r3, #25]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d126      	bne.n	800237c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7e1b      	ldrb	r3, [r3, #24]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d122      	bne.n	800237c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002336:	2301      	movs	r3, #1
 8002338:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800233a:	e014      	b.n	8002366 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	4a45      	ldr	r2, [pc, #276]	; (8002454 <ADC_ConversionStop+0x174>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d90d      	bls.n	8002360 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002348:	f043 0210 	orr.w	r2, r3, #16
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e074      	b.n	800244a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	3301      	adds	r3, #1
 8002364:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d1e3      	bne.n	800233c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2240      	movs	r2, #64	; 0x40
 800237a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d014      	beq.n	80023ac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff f916 	bl	80015b8 <LL_ADC_REG_IsConversionOngoing>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff f8d3 	bl	8001542 <LL_ADC_IsDisableOngoing>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f8f2 	bl	8001590 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d014      	beq.n	80023dc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f925 	bl	8001606 <LL_ADC_INJ_IsConversionOngoing>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00c      	beq.n	80023dc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f8bb 	bl	8001542 <LL_ADC_IsDisableOngoing>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d104      	bne.n	80023dc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f901 	bl	80015de <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d005      	beq.n	80023ee <ADC_ConversionStop+0x10e>
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d105      	bne.n	80023f4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80023e8:	230c      	movs	r3, #12
 80023ea:	617b      	str	r3, [r7, #20]
        break;
 80023ec:	e005      	b.n	80023fa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80023ee:	2308      	movs	r3, #8
 80023f0:	617b      	str	r3, [r7, #20]
        break;
 80023f2:	e002      	b.n	80023fa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80023f4:	2304      	movs	r3, #4
 80023f6:	617b      	str	r3, [r7, #20]
        break;
 80023f8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80023fa:	f7fe fed1 	bl	80011a0 <HAL_GetTick>
 80023fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002400:	e01b      	b.n	800243a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002402:	f7fe fecd 	bl	80011a0 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b05      	cmp	r3, #5
 800240e:	d914      	bls.n	800243a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00d      	beq.n	800243a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	f043 0210 	orr.w	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e007      	b.n	800244a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1dc      	bne.n	8002402 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	a33fffff 	.word	0xa33fffff

08002458 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff f857 	bl	800151c <LL_ADC_IsEnabled>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d169      	bne.n	8002548 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	4b36      	ldr	r3, [pc, #216]	; (8002554 <ADC_Enable+0xfc>)
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e055      	b.n	800254a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff f812 	bl	80014cc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80024a8:	482b      	ldr	r0, [pc, #172]	; (8002558 <ADC_Enable+0x100>)
 80024aa:	f7fe fecf 	bl	800124c <LL_ADC_GetCommonPathInternalCh>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b8:	4b28      	ldr	r3, [pc, #160]	; (800255c <ADC_Enable+0x104>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	4a28      	ldr	r2, [pc, #160]	; (8002560 <ADC_Enable+0x108>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80024d2:	e002      	b.n	80024da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f9      	bne.n	80024d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fe5e 	bl	80011a0 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024e6:	e028      	b.n	800253a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff f815 	bl	800151c <LL_ADC_IsEnabled>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d104      	bne.n	8002502 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe ffe5 	bl	80014cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002502:	f7fe fe4d 	bl	80011a0 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d914      	bls.n	800253a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d00d      	beq.n	800253a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f043 0210 	orr.w	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252e:	f043 0201 	orr.w	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e007      	b.n	800254a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d1cf      	bne.n	80024e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	8000003f 	.word	0x8000003f
 8002558:	50040300 	.word	0x50040300
 800255c:	20000000 	.word	0x20000000
 8002560:	053e2d63 	.word	0x053e2d63

08002564 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe ffe6 	bl	8001542 <LL_ADC_IsDisableOngoing>
 8002576:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe ffcd 	bl	800151c <LL_ADC_IsEnabled>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d047      	beq.n	8002618 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d144      	bne.n	8002618 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030d 	and.w	r3, r3, #13
 8002598:	2b01      	cmp	r3, #1
 800259a:	d10c      	bne.n	80025b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe ffa7 	bl	80014f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2203      	movs	r2, #3
 80025ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025ae:	f7fe fdf7 	bl	80011a0 <HAL_GetTick>
 80025b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025b4:	e029      	b.n	800260a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e023      	b.n	800261a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025d2:	f7fe fde5 	bl	80011a0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d914      	bls.n	800260a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00d      	beq.n	800260a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f043 0210 	orr.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e007      	b.n	800261a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1dc      	bne.n	80025d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800264c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	60d3      	str	r3, [r2, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <__NVIC_GetPriorityGrouping+0x18>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0307 	and.w	r3, r3, #7
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db0a      	blt.n	80026b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	490c      	ldr	r1, [pc, #48]	; (80026d4 <__NVIC_SetPriority+0x4c>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b0:	e00a      	b.n	80026c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4908      	ldr	r1, [pc, #32]	; (80026d8 <__NVIC_SetPriority+0x50>)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3b04      	subs	r3, #4
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	440b      	add	r3, r1
 80026c6:	761a      	strb	r2, [r3, #24]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000e100 	.word	0xe000e100
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f1c3 0307 	rsb	r3, r3, #7
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	bf28      	it	cs
 80026fa:	2304      	movcs	r3, #4
 80026fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3304      	adds	r3, #4
 8002702:	2b06      	cmp	r3, #6
 8002704:	d902      	bls.n	800270c <NVIC_EncodePriority+0x30>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3b03      	subs	r3, #3
 800270a:	e000      	b.n	800270e <NVIC_EncodePriority+0x32>
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	401a      	ands	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43d9      	mvns	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	4313      	orrs	r3, r2
         );
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002754:	d301      	bcc.n	800275a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002756:	2301      	movs	r3, #1
 8002758:	e00f      	b.n	800277a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <SysTick_Config+0x40>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002762:	210f      	movs	r1, #15
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f7ff ff8e 	bl	8002688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <SysTick_Config+0x40>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <SysTick_Config+0x40>)
 8002774:	2207      	movs	r2, #7
 8002776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	e000e010 	.word	0xe000e010

08002788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff47 	bl	8002624 <__NVIC_SetPriorityGrouping>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b0:	f7ff ff5c 	bl	800266c <__NVIC_GetPriorityGrouping>
 80027b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7ff ff8e 	bl	80026dc <NVIC_EncodePriority>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff5d 	bl	8002688 <__NVIC_SetPriority>
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffb0 	bl	8002744 <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fe:	e148      	b.n	8002a92 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 813a 	beq.w	8002a8c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d005      	beq.n	8002830 <HAL_GPIO_Init+0x40>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d130      	bne.n	8002892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002866:	2201      	movs	r2, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0201 	and.w	r2, r3, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b03      	cmp	r3, #3
 800289c:	d017      	beq.n	80028ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d123      	bne.n	8002922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	6939      	ldr	r1, [r7, #16]
 800291e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0203 	and.w	r2, r3, #3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8094 	beq.w	8002a8c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002964:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <HAL_GPIO_Init+0x2c0>)
 8002966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002968:	4a51      	ldr	r2, [pc, #324]	; (8002ab0 <HAL_GPIO_Init+0x2c0>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6613      	str	r3, [r2, #96]	; 0x60
 8002970:	4b4f      	ldr	r3, [pc, #316]	; (8002ab0 <HAL_GPIO_Init+0x2c0>)
 8002972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800297c:	4a4d      	ldr	r2, [pc, #308]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029a6:	d00d      	beq.n	80029c4 <HAL_GPIO_Init+0x1d4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a43      	ldr	r2, [pc, #268]	; (8002ab8 <HAL_GPIO_Init+0x2c8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d007      	beq.n	80029c0 <HAL_GPIO_Init+0x1d0>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a42      	ldr	r2, [pc, #264]	; (8002abc <HAL_GPIO_Init+0x2cc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <HAL_GPIO_Init+0x1cc>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e004      	b.n	80029c6 <HAL_GPIO_Init+0x1d6>
 80029bc:	2307      	movs	r3, #7
 80029be:	e002      	b.n	80029c6 <HAL_GPIO_Init+0x1d6>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_GPIO_Init+0x1d6>
 80029c4:	2300      	movs	r3, #0
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	f002 0203 	and.w	r2, r2, #3
 80029cc:	0092      	lsls	r2, r2, #2
 80029ce:	4093      	lsls	r3, r2
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029d6:	4937      	ldr	r1, [pc, #220]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e4:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a08:	4a2d      	ldr	r2, [pc, #180]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a32:	4a23      	ldr	r2, [pc, #140]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a38:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f47f aeaf 	bne.w	8002800 <HAL_GPIO_Init+0x10>
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	48000400 	.word	0x48000400
 8002abc:	48000800 	.word	0x48000800
 8002ac0:	40010400 	.word	0x40010400

08002ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	e001      	b.n	8002ae6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b10:	e002      	b.n	8002b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40007000 	.word	0x40007000

08002b40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4e:	d130      	bne.n	8002bb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5c:	d038      	beq.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b66:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2232      	movs	r2, #50	; 0x32
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	0c9b      	lsrs	r3, r3, #18
 8002b80:	3301      	adds	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b84:	e002      	b.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b98:	d102      	bne.n	8002ba0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f2      	bne.n	8002b86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bac:	d110      	bne.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e00f      	b.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d007      	beq.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc8:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000
 8002be4:	20000000 	.word	0x20000000
 8002be8:	431bde83 	.word	0x431bde83

08002bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f000 bc02 	b.w	8003404 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c00:	4b96      	ldr	r3, [pc, #600]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c0a:	4b94      	ldr	r3, [pc, #592]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80e4 	beq.w	8002dea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <HAL_RCC_OscConfig+0x4c>
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	f040 808b 	bne.w	8002d46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	f040 8087 	bne.w	8002d46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c38:	4b88      	ldr	r3, [pc, #544]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_OscConfig+0x64>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e3d9      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1a      	ldr	r2, [r3, #32]
 8002c54:	4b81      	ldr	r3, [pc, #516]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d004      	beq.n	8002c6a <HAL_RCC_OscConfig+0x7e>
 8002c60:	4b7e      	ldr	r3, [pc, #504]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c68:	e005      	b.n	8002c76 <HAL_RCC_OscConfig+0x8a>
 8002c6a:	4b7c      	ldr	r3, [pc, #496]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d223      	bcs.n	8002cc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fd8c 	bl	800379c <RCC_SetFlashLatencyFromMSIRange>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e3ba      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8e:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a72      	ldr	r2, [pc, #456]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b70      	ldr	r3, [pc, #448]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	496d      	ldr	r1, [pc, #436]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cac:	4b6b      	ldr	r3, [pc, #428]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	4968      	ldr	r1, [pc, #416]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
 8002cc0:	e025      	b.n	8002d0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc2:	4b66      	ldr	r3, [pc, #408]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a65      	ldr	r2, [pc, #404]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002cc8:	f043 0308 	orr.w	r3, r3, #8
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4960      	ldr	r1, [pc, #384]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ce0:	4b5e      	ldr	r3, [pc, #376]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	495b      	ldr	r1, [pc, #364]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fd4c 	bl	800379c <RCC_SetFlashLatencyFromMSIRange>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e37a      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d0e:	f000 fc81 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b51      	ldr	r3, [pc, #324]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	4950      	ldr	r1, [pc, #320]	; (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d20:	5ccb      	ldrb	r3, [r1, r3]
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2a:	4a4e      	ldr	r2, [pc, #312]	; (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002d2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d2e:	4b4e      	ldr	r3, [pc, #312]	; (8002e68 <HAL_RCC_OscConfig+0x27c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe f9e4 	bl	8001100 <HAL_InitTick>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d052      	beq.n	8002de8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	e35e      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d032      	beq.n	8002db4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d4e:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a42      	ldr	r2, [pc, #264]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d5a:	f7fe fa21 	bl	80011a0 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d62:	f7fe fa1d 	bl	80011a0 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e347      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d74:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d80:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a35      	ldr	r2, [pc, #212]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d86:	f043 0308 	orr.w	r3, r3, #8
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	4930      	ldr	r1, [pc, #192]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d9e:	4b2f      	ldr	r3, [pc, #188]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	492b      	ldr	r1, [pc, #172]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
 8002db2:	e01a      	b.n	8002dea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a28      	ldr	r2, [pc, #160]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe f9ee 	bl	80011a0 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc8:	f7fe f9ea 	bl	80011a0 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e314      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x1dc>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d073      	beq.n	8002ede <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_OscConfig+0x21c>
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d10e      	bne.n	8002e20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d10b      	bne.n	8002e20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d063      	beq.n	8002edc <HAL_RCC_OscConfig+0x2f0>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d15f      	bne.n	8002edc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e2f1      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e28:	d106      	bne.n	8002e38 <HAL_RCC_OscConfig+0x24c>
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e025      	b.n	8002e84 <HAL_RCC_OscConfig+0x298>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e40:	d114      	bne.n	8002e6c <HAL_RCC_OscConfig+0x280>
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a02      	ldr	r2, [pc, #8]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e013      	b.n	8002e84 <HAL_RCC_OscConfig+0x298>
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	0800610c 	.word	0x0800610c
 8002e64:	20000000 	.word	0x20000000
 8002e68:	20000004 	.word	0x20000004
 8002e6c:	4ba0      	ldr	r3, [pc, #640]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a9f      	ldr	r2, [pc, #636]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b9d      	ldr	r3, [pc, #628]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a9c      	ldr	r2, [pc, #624]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe f988 	bl	80011a0 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe f984 	bl	80011a0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e2ae      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea6:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x2a8>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe f974 	bl	80011a0 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7fe f970 	bl	80011a0 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e29a      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ece:	4b88      	ldr	r3, [pc, #544]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x2d0>
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d060      	beq.n	8002fac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_OscConfig+0x310>
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d119      	bne.n	8002f2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d116      	bne.n	8002f2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002efc:	4b7c      	ldr	r3, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_OscConfig+0x328>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e277      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b76      	ldr	r3, [pc, #472]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	4973      	ldr	r1, [pc, #460]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f28:	e040      	b.n	8002fac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d023      	beq.n	8002f7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f32:	4b6f      	ldr	r3, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6e      	ldr	r2, [pc, #440]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fe f92f 	bl	80011a0 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f46:	f7fe f92b 	bl	80011a0 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e255      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f58:	4b65      	ldr	r3, [pc, #404]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	4b62      	ldr	r3, [pc, #392]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	495f      	ldr	r1, [pc, #380]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
 8002f78:	e018      	b.n	8002fac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7a:	4b5d      	ldr	r3, [pc, #372]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a5c      	ldr	r2, [pc, #368]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe f90b 	bl	80011a0 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe f907 	bl	80011a0 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e231      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fa0:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d03c      	beq.n	8003032 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01c      	beq.n	8002ffa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc0:	4b4b      	ldr	r3, [pc, #300]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc6:	4a4a      	ldr	r2, [pc, #296]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe f8e6 	bl	80011a0 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd8:	f7fe f8e2 	bl	80011a0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e20c      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fea:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ef      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x3ec>
 8002ff8:	e01b      	b.n	8003032 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8002ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003000:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300a:	f7fe f8c9 	bl	80011a0 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003012:	f7fe f8c5 	bl	80011a0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e1ef      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003024:	4b32      	ldr	r3, [pc, #200]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8003026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ef      	bne.n	8003012 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80a6 	beq.w	800318c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003040:	2300      	movs	r3, #0
 8003042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003044:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10d      	bne.n	800306c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003050:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 8003056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305a:	6593      	str	r3, [r2, #88]	; 0x58
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003068:	2301      	movs	r3, #1
 800306a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_RCC_OscConfig+0x508>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d118      	bne.n	80030aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003078:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <HAL_RCC_OscConfig+0x508>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1d      	ldr	r2, [pc, #116]	; (80030f4 <HAL_RCC_OscConfig+0x508>)
 800307e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003082:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003084:	f7fe f88c 	bl	80011a0 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308c:	f7fe f888 	bl	80011a0 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e1b2      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_RCC_OscConfig+0x508>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d108      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4d8>
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c2:	e029      	b.n	8003118 <HAL_RCC_OscConfig+0x52c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d115      	bne.n	80030f8 <HAL_RCC_OscConfig+0x50c>
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	4a03      	ldr	r2, [pc, #12]	; (80030f0 <HAL_RCC_OscConfig+0x504>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ec:	e014      	b.n	8003118 <HAL_RCC_OscConfig+0x52c>
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40007000 	.word	0x40007000
 80030f8:	4b9a      	ldr	r3, [pc, #616]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	4a99      	ldr	r2, [pc, #612]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003108:	4b96      	ldr	r3, [pc, #600]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	4a95      	ldr	r2, [pc, #596]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d016      	beq.n	800314e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fe f83e 	bl	80011a0 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe f83a 	bl	80011a0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e162      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313e:	4b89      	ldr	r3, [pc, #548]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ed      	beq.n	8003128 <HAL_RCC_OscConfig+0x53c>
 800314c:	e015      	b.n	800317a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7fe f827 	bl	80011a0 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7fe f823 	bl	80011a0 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e14b      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800316c:	4b7d      	ldr	r3, [pc, #500]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ed      	bne.n	8003156 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800317a:	7ffb      	ldrb	r3, [r7, #31]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003180:	4b78      	ldr	r3, [pc, #480]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003184:	4a77      	ldr	r2, [pc, #476]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 8003186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b00      	cmp	r3, #0
 8003196:	d03c      	beq.n	8003212 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01c      	beq.n	80031da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031a0:	4b70      	ldr	r3, [pc, #448]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 80031a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031a6:	4a6f      	ldr	r2, [pc, #444]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fd fff6 	bl	80011a0 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b8:	f7fd fff2 	bl	80011a0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e11c      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ca:	4b66      	ldr	r3, [pc, #408]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 80031cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ef      	beq.n	80031b8 <HAL_RCC_OscConfig+0x5cc>
 80031d8:	e01b      	b.n	8003212 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031da:	4b62      	ldr	r3, [pc, #392]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 80031dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e0:	4a60      	ldr	r2, [pc, #384]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fd ffd9 	bl	80011a0 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031f2:	f7fd ffd5 	bl	80011a0 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0ff      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003204:	4b57      	ldr	r3, [pc, #348]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 8003206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1ef      	bne.n	80031f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 80f3 	beq.w	8003402 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	2b02      	cmp	r3, #2
 8003222:	f040 80c9 	bne.w	80033b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003226:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0203 	and.w	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	429a      	cmp	r2, r3
 8003238:	d12c      	bne.n	8003294 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	3b01      	subs	r3, #1
 8003246:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d123      	bne.n	8003294 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d11b      	bne.n	8003294 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d113      	bne.n	8003294 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	3b01      	subs	r3, #1
 800327a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d109      	bne.n	8003294 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	3b01      	subs	r3, #1
 800328e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d06b      	beq.n	800336c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d062      	beq.n	8003360 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800329a:	4b32      	ldr	r3, [pc, #200]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0ac      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032aa:	4b2e      	ldr	r3, [pc, #184]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2d      	ldr	r2, [pc, #180]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 80032b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032b6:	f7fd ff73 	bl	80011a0 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032be:	f7fd ff6f 	bl	80011a0 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e099      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d0:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f0      	bne.n	80032be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_RCC_OscConfig+0x77c>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ec:	3a01      	subs	r2, #1
 80032ee:	0112      	lsls	r2, r2, #4
 80032f0:	4311      	orrs	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032f6:	0212      	lsls	r2, r2, #8
 80032f8:	4311      	orrs	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032fe:	0852      	lsrs	r2, r2, #1
 8003300:	3a01      	subs	r2, #1
 8003302:	0552      	lsls	r2, r2, #21
 8003304:	4311      	orrs	r1, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800330a:	0852      	lsrs	r2, r2, #1
 800330c:	3a01      	subs	r2, #1
 800330e:	0652      	lsls	r2, r2, #25
 8003310:	4311      	orrs	r1, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003316:	06d2      	lsls	r2, r2, #27
 8003318:	430a      	orrs	r2, r1
 800331a:	4912      	ldr	r1, [pc, #72]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 800331c:	4313      	orrs	r3, r2
 800331e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003320:	4b10      	ldr	r3, [pc, #64]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0f      	ldr	r2, [pc, #60]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 8003326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800332c:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a0c      	ldr	r2, [pc, #48]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 8003332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003336:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003338:	f7fd ff32 	bl	80011a0 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fd ff2e 	bl	80011a0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e058      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003352:	4b04      	ldr	r3, [pc, #16]	; (8003364 <HAL_RCC_OscConfig+0x778>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800335e:	e050      	b.n	8003402 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e04f      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
 8003364:	40021000 	.word	0x40021000
 8003368:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <HAL_RCC_OscConfig+0x820>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d144      	bne.n	8003402 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_OscConfig+0x820>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_RCC_OscConfig+0x820>)
 800337e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003382:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_RCC_OscConfig+0x820>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a20      	ldr	r2, [pc, #128]	; (800340c <HAL_RCC_OscConfig+0x820>)
 800338a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003390:	f7fd ff06 	bl	80011a0 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fd ff02 	bl	80011a0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e02c      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033aa:	4b18      	ldr	r3, [pc, #96]	; (800340c <HAL_RCC_OscConfig+0x820>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x7ac>
 80033b6:	e024      	b.n	8003402 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d01f      	beq.n	80033fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_RCC_OscConfig+0x820>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a12      	ldr	r2, [pc, #72]	; (800340c <HAL_RCC_OscConfig+0x820>)
 80033c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ca:	f7fd fee9 	bl	80011a0 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d2:	f7fd fee5 	bl	80011a0 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e00f      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_OscConfig+0x820>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f0      	bne.n	80033d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_RCC_OscConfig+0x820>)
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	4905      	ldr	r1, [pc, #20]	; (800340c <HAL_RCC_OscConfig+0x820>)
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_OscConfig+0x824>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	60cb      	str	r3, [r1, #12]
 80033fc:	e001      	b.n	8003402 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000
 8003410:	feeefffc 	.word	0xfeeefffc

08003414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0e7      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b75      	ldr	r3, [pc, #468]	; (8003600 <HAL_RCC_ClockConfig+0x1ec>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d910      	bls.n	8003458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b72      	ldr	r3, [pc, #456]	; (8003600 <HAL_RCC_ClockConfig+0x1ec>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	4970      	ldr	r1, [pc, #448]	; (8003600 <HAL_RCC_ClockConfig+0x1ec>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b6e      	ldr	r3, [pc, #440]	; (8003600 <HAL_RCC_ClockConfig+0x1ec>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0cf      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d010      	beq.n	8003486 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	4b66      	ldr	r3, [pc, #408]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003470:	429a      	cmp	r2, r3
 8003472:	d908      	bls.n	8003486 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003474:	4b63      	ldr	r3, [pc, #396]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4960      	ldr	r1, [pc, #384]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04c      	beq.n	800352c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349a:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d121      	bne.n	80034ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0a6      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b2:	4b54      	ldr	r3, [pc, #336]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d115      	bne.n	80034ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e09a      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ca:	4b4e      	ldr	r3, [pc, #312]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e08e      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034da:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e086      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ea:	4b46      	ldr	r3, [pc, #280]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f023 0203 	bic.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4943      	ldr	r1, [pc, #268]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fc:	f7fd fe50 	bl	80011a0 <HAL_GetTick>
 8003500:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	e00a      	b.n	800351a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003504:	f7fd fe4c 	bl	80011a0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e06e      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 020c 	and.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	429a      	cmp	r2, r3
 800352a:	d1eb      	bne.n	8003504 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d010      	beq.n	800355a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	4b31      	ldr	r3, [pc, #196]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003544:	429a      	cmp	r2, r3
 8003546:	d208      	bcs.n	800355a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003548:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	492b      	ldr	r1, [pc, #172]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800355a:	4b29      	ldr	r3, [pc, #164]	; (8003600 <HAL_RCC_ClockConfig+0x1ec>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d210      	bcs.n	800358a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_RCC_ClockConfig+0x1ec>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 0207 	bic.w	r2, r3, #7
 8003570:	4923      	ldr	r1, [pc, #140]	; (8003600 <HAL_RCC_ClockConfig+0x1ec>)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003578:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_RCC_ClockConfig+0x1ec>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d001      	beq.n	800358a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e036      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003596:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4918      	ldr	r1, [pc, #96]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d009      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b4:	4b13      	ldr	r3, [pc, #76]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4910      	ldr	r1, [pc, #64]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c8:	f000 f824 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	490b      	ldr	r1, [pc, #44]	; (8003608 <HAL_RCC_ClockConfig+0x1f4>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1f8>)
 80035e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035e8:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RCC_ClockConfig+0x1fc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fd fd87 	bl	8001100 <HAL_InitTick>
 80035f2:	4603      	mov	r3, r0
 80035f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80035f6:	7afb      	ldrb	r3, [r7, #11]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40022000 	.word	0x40022000
 8003604:	40021000 	.word	0x40021000
 8003608:	0800610c 	.word	0x0800610c
 800360c:	20000000 	.word	0x20000000
 8003610:	20000004 	.word	0x20000004

08003614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	b480      	push	{r7}
 8003616:	b089      	sub	sp, #36	; 0x24
 8003618:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003622:	4b3e      	ldr	r3, [pc, #248]	; (800371c <HAL_RCC_GetSysClockFreq+0x108>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800362c:	4b3b      	ldr	r3, [pc, #236]	; (800371c <HAL_RCC_GetSysClockFreq+0x108>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x34>
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d121      	bne.n	8003686 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d11e      	bne.n	8003686 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003648:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_GetSysClockFreq+0x108>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d107      	bne.n	8003664 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003654:	4b31      	ldr	r3, [pc, #196]	; (800371c <HAL_RCC_GetSysClockFreq+0x108>)
 8003656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e005      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <HAL_RCC_GetSysClockFreq+0x108>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003670:	4a2b      	ldr	r2, [pc, #172]	; (8003720 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003678:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003684:	e00a      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d102      	bne.n	8003692 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800368c:	4b25      	ldr	r3, [pc, #148]	; (8003724 <HAL_RCC_GetSysClockFreq+0x110>)
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	e004      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d101      	bne.n	800369c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003698:	4b23      	ldr	r3, [pc, #140]	; (8003728 <HAL_RCC_GetSysClockFreq+0x114>)
 800369a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	d134      	bne.n	800370c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_RCC_GetSysClockFreq+0x108>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d003      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0xa6>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d003      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0xac>
 80036b8:	e005      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036ba:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <HAL_RCC_GetSysClockFreq+0x110>)
 80036bc:	617b      	str	r3, [r7, #20]
      break;
 80036be:	e005      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_RCC_GetSysClockFreq+0x114>)
 80036c2:	617b      	str	r3, [r7, #20]
      break;
 80036c4:	e002      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	617b      	str	r3, [r7, #20]
      break;
 80036ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036cc:	4b13      	ldr	r3, [pc, #76]	; (800371c <HAL_RCC_GetSysClockFreq+0x108>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	3301      	adds	r3, #1
 80036d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <HAL_RCC_GetSysClockFreq+0x108>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	fb03 f202 	mul.w	r2, r3, r2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <HAL_RCC_GetSysClockFreq+0x108>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	0e5b      	lsrs	r3, r3, #25
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	3301      	adds	r3, #1
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	fbb2 f3f3 	udiv	r3, r2, r3
 800370a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800370c:	69bb      	ldr	r3, [r7, #24]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	08006124 	.word	0x08006124
 8003724:	00f42400 	.word	0x00f42400
 8003728:	007a1200 	.word	0x007a1200

0800372c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <HAL_RCC_GetHCLKFreq+0x14>)
 8003732:	681b      	ldr	r3, [r3, #0]
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20000000 	.word	0x20000000

08003744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003748:	f7ff fff0 	bl	800372c <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4904      	ldr	r1, [pc, #16]	; (800376c <HAL_RCC_GetPCLK1Freq+0x28>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40021000 	.word	0x40021000
 800376c:	0800611c 	.word	0x0800611c

08003770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003774:	f7ff ffda 	bl	800372c <HAL_RCC_GetHCLKFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x24>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	0adb      	lsrs	r3, r3, #11
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	4904      	ldr	r1, [pc, #16]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	0800611c 	.word	0x0800611c

0800379c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037a4:	2300      	movs	r3, #0
 80037a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037a8:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037b4:	f7ff f9b6 	bl	8002b24 <HAL_PWREx_GetVoltageRange>
 80037b8:	6178      	str	r0, [r7, #20]
 80037ba:	e014      	b.n	80037e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	4a24      	ldr	r2, [pc, #144]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c6:	6593      	str	r3, [r2, #88]	; 0x58
 80037c8:	4b22      	ldr	r3, [pc, #136]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037d4:	f7ff f9a6 	bl	8002b24 <HAL_PWREx_GetVoltageRange>
 80037d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037da:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ec:	d10b      	bne.n	8003806 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b80      	cmp	r3, #128	; 0x80
 80037f2:	d919      	bls.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2ba0      	cmp	r3, #160	; 0xa0
 80037f8:	d902      	bls.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037fa:	2302      	movs	r3, #2
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	e013      	b.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003800:	2301      	movs	r3, #1
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	e010      	b.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b80      	cmp	r3, #128	; 0x80
 800380a:	d902      	bls.n	8003812 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800380c:	2303      	movs	r3, #3
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	e00a      	b.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d102      	bne.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003818:	2302      	movs	r3, #2
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	e004      	b.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b70      	cmp	r3, #112	; 0x70
 8003822:	d101      	bne.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003824:	2301      	movs	r3, #1
 8003826:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 0207 	bic.w	r2, r3, #7
 8003830:	4909      	ldr	r1, [pc, #36]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	429a      	cmp	r2, r3
 8003844:	d001      	beq.n	800384a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000
 8003858:	40022000 	.word	0x40022000

0800385c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003864:	2300      	movs	r3, #0
 8003866:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003868:	2300      	movs	r3, #0
 800386a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003874:	2b00      	cmp	r3, #0
 8003876:	d031      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003880:	d01a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003882:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003886:	d814      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800388c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003890:	d10f      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003892:	4b5d      	ldr	r3, [pc, #372]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	4a5c      	ldr	r2, [pc, #368]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800389e:	e00c      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f9ce 	bl	8003c48 <RCCEx_PLLSAI1_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038b0:	e003      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	74fb      	strb	r3, [r7, #19]
      break;
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ba:	7cfb      	ldrb	r3, [r7, #19]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c0:	4b51      	ldr	r3, [pc, #324]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	494e      	ldr	r1, [pc, #312]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038d6:	e001      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 809e 	beq.w	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038ee:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003904:	4b40      	ldr	r3, [pc, #256]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	4a3f      	ldr	r2, [pc, #252]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800390a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390e:	6593      	str	r3, [r2, #88]	; 0x58
 8003910:	4b3d      	ldr	r3, [pc, #244]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391c:	2301      	movs	r3, #1
 800391e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003920:	4b3a      	ldr	r3, [pc, #232]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a39      	ldr	r2, [pc, #228]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800392c:	f7fd fc38 	bl	80011a0 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003932:	e009      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003934:	f7fd fc34 	bl	80011a0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	74fb      	strb	r3, [r7, #19]
        break;
 8003946:	e005      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003948:	4b30      	ldr	r3, [pc, #192]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ef      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d15a      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800395a:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003964:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01e      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	429a      	cmp	r2, r3
 8003974:	d019      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003980:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003982:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800398a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	4a1b      	ldr	r2, [pc, #108]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800399a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039a2:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d016      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fbf4 	bl	80011a0 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ba:	e00b      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039bc:	f7fd fbf0 	bl	80011a0 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d902      	bls.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	74fb      	strb	r3, [r7, #19]
            break;
 80039d2:	e006      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0ec      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80039e2:	7cfb      	ldrb	r3, [r7, #19]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e8:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f6:	4904      	ldr	r1, [pc, #16]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039fe:	e009      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	74bb      	strb	r3, [r7, #18]
 8003a04:	e006      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a14:	7c7b      	ldrb	r3, [r7, #17]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1a:	4b8a      	ldr	r3, [pc, #552]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4a89      	ldr	r2, [pc, #548]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a32:	4b84      	ldr	r3, [pc, #528]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f023 0203 	bic.w	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4980      	ldr	r1, [pc, #512]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a54:	4b7b      	ldr	r3, [pc, #492]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 020c 	bic.w	r2, r3, #12
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	4978      	ldr	r1, [pc, #480]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a76:	4b73      	ldr	r3, [pc, #460]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	496f      	ldr	r1, [pc, #444]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a98:	4b6a      	ldr	r3, [pc, #424]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	4967      	ldr	r1, [pc, #412]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aba:	4b62      	ldr	r3, [pc, #392]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	495e      	ldr	r1, [pc, #376]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003adc:	4b59      	ldr	r3, [pc, #356]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	4956      	ldr	r1, [pc, #344]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003afe:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	494d      	ldr	r1, [pc, #308]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d028      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b20:	4b48      	ldr	r3, [pc, #288]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	4945      	ldr	r1, [pc, #276]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b40:	4b40      	ldr	r3, [pc, #256]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a3f      	ldr	r2, [pc, #252]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4a:	60d3      	str	r3, [r2, #12]
 8003b4c:	e011      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b56:	d10c      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f872 	bl	8003c48 <RCCEx_PLLSAI1_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d028      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b7e:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	492d      	ldr	r1, [pc, #180]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b9c:	d106      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b9e:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	4a28      	ldr	r2, [pc, #160]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba8:	60d3      	str	r3, [r2, #12]
 8003baa:	e011      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f843 	bl	8003c48 <RCCEx_PLLSAI1_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01c      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bdc:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bea:	4916      	ldr	r1, [pc, #88]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bfa:	d10c      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	2102      	movs	r1, #2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f820 	bl	8003c48 <RCCEx_PLLSAI1_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c30:	4904      	ldr	r1, [pc, #16]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c38:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000

08003c48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c56:	4b74      	ldr	r3, [pc, #464]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d018      	beq.n	8003c94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c62:	4b71      	ldr	r3, [pc, #452]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0203 	and.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d10d      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
       ||
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d009      	beq.n	8003c8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c7a:	4b6b      	ldr	r3, [pc, #428]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
       ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d047      	beq.n	8003d1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
 8003c92:	e044      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d018      	beq.n	8003cce <RCCEx_PLLSAI1_Config+0x86>
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d825      	bhi.n	8003cec <RCCEx_PLLSAI1_Config+0xa4>
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d002      	beq.n	8003caa <RCCEx_PLLSAI1_Config+0x62>
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d009      	beq.n	8003cbc <RCCEx_PLLSAI1_Config+0x74>
 8003ca8:	e020      	b.n	8003cec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003caa:	4b5f      	ldr	r3, [pc, #380]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d11d      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cba:	e01a      	b.n	8003cf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cbc:	4b5a      	ldr	r3, [pc, #360]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d116      	bne.n	8003cf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ccc:	e013      	b.n	8003cf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cce:	4b56      	ldr	r3, [pc, #344]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10f      	bne.n	8003cfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cda:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cea:	e006      	b.n	8003cfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf0:	e004      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e002      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d02:	4b49      	ldr	r3, [pc, #292]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6819      	ldr	r1, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	430b      	orrs	r3, r1
 8003d18:	4943      	ldr	r1, [pc, #268]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d17c      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d24:	4b40      	ldr	r3, [pc, #256]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a3f      	ldr	r2, [pc, #252]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d30:	f7fd fa36 	bl	80011a0 <HAL_GetTick>
 8003d34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d36:	e009      	b.n	8003d4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d38:	f7fd fa32 	bl	80011a0 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d902      	bls.n	8003d4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	73fb      	strb	r3, [r7, #15]
        break;
 8003d4a:	e005      	b.n	8003d58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1ef      	bne.n	8003d38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d15f      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d110      	bne.n	8003d86 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d64:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6892      	ldr	r2, [r2, #8]
 8003d74:	0211      	lsls	r1, r2, #8
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68d2      	ldr	r2, [r2, #12]
 8003d7a:	06d2      	lsls	r2, r2, #27
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	492a      	ldr	r1, [pc, #168]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	610b      	str	r3, [r1, #16]
 8003d84:	e027      	b.n	8003dd6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d112      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d8c:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6892      	ldr	r2, [r2, #8]
 8003d9c:	0211      	lsls	r1, r2, #8
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6912      	ldr	r2, [r2, #16]
 8003da2:	0852      	lsrs	r2, r2, #1
 8003da4:	3a01      	subs	r2, #1
 8003da6:	0552      	lsls	r2, r2, #21
 8003da8:	430a      	orrs	r2, r1
 8003daa:	491f      	ldr	r1, [pc, #124]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	610b      	str	r3, [r1, #16]
 8003db0:	e011      	b.n	8003dd6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6892      	ldr	r2, [r2, #8]
 8003dc2:	0211      	lsls	r1, r2, #8
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6952      	ldr	r2, [r2, #20]
 8003dc8:	0852      	lsrs	r2, r2, #1
 8003dca:	3a01      	subs	r2, #1
 8003dcc:	0652      	lsls	r2, r2, #25
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	4915      	ldr	r1, [pc, #84]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dd6:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ddc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003de0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de2:	f7fd f9dd 	bl	80011a0 <HAL_GetTick>
 8003de6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003de8:	e009      	b.n	8003dfe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dea:	f7fd f9d9 	bl	80011a0 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d902      	bls.n	8003dfe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	73fb      	strb	r3, [r7, #15]
          break;
 8003dfc:	e005      	b.n	8003e0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ef      	beq.n	8003dea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	4903      	ldr	r1, [pc, #12]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40021000 	.word	0x40021000

08003e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e049      	b.n	8003ed2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fc ffaa 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f000 fb52 	bl	8004514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e049      	b.n	8003f80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d106      	bne.n	8003f06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f841 	bl	8003f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f000 fafb 	bl	8004514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_TIM_PWM_Start+0x24>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e03c      	b.n	800403a <HAL_TIM_PWM_Start+0x9e>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d109      	bne.n	8003fda <HAL_TIM_PWM_Start+0x3e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e02f      	b.n	800403a <HAL_TIM_PWM_Start+0x9e>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d109      	bne.n	8003ff4 <HAL_TIM_PWM_Start+0x58>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e022      	b.n	800403a <HAL_TIM_PWM_Start+0x9e>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	d109      	bne.n	800400e <HAL_TIM_PWM_Start+0x72>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	bf14      	ite	ne
 8004006:	2301      	movne	r3, #1
 8004008:	2300      	moveq	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	e015      	b.n	800403a <HAL_TIM_PWM_Start+0x9e>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b10      	cmp	r3, #16
 8004012:	d109      	bne.n	8004028 <HAL_TIM_PWM_Start+0x8c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	bf14      	ite	ne
 8004020:	2301      	movne	r3, #1
 8004022:	2300      	moveq	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e008      	b.n	800403a <HAL_TIM_PWM_Start+0x9e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	bf14      	ite	ne
 8004034:	2301      	movne	r3, #1
 8004036:	2300      	moveq	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e07e      	b.n	8004140 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <HAL_TIM_PWM_Start+0xb6>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004050:	e023      	b.n	800409a <HAL_TIM_PWM_Start+0xfe>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d104      	bne.n	8004062 <HAL_TIM_PWM_Start+0xc6>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004060:	e01b      	b.n	800409a <HAL_TIM_PWM_Start+0xfe>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d104      	bne.n	8004072 <HAL_TIM_PWM_Start+0xd6>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004070:	e013      	b.n	800409a <HAL_TIM_PWM_Start+0xfe>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b0c      	cmp	r3, #12
 8004076:	d104      	bne.n	8004082 <HAL_TIM_PWM_Start+0xe6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004080:	e00b      	b.n	800409a <HAL_TIM_PWM_Start+0xfe>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b10      	cmp	r3, #16
 8004086:	d104      	bne.n	8004092 <HAL_TIM_PWM_Start+0xf6>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004090:	e003      	b.n	800409a <HAL_TIM_PWM_Start+0xfe>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2201      	movs	r2, #1
 80040a0:	6839      	ldr	r1, [r7, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fdb2 	bl	8004c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a26      	ldr	r2, [pc, #152]	; (8004148 <HAL_TIM_PWM_Start+0x1ac>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x12a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a25      	ldr	r2, [pc, #148]	; (800414c <HAL_TIM_PWM_Start+0x1b0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x12a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a23      	ldr	r2, [pc, #140]	; (8004150 <HAL_TIM_PWM_Start+0x1b4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d101      	bne.n	80040ca <HAL_TIM_PWM_Start+0x12e>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_TIM_PWM_Start+0x130>
 80040ca:	2300      	movs	r3, #0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a18      	ldr	r2, [pc, #96]	; (8004148 <HAL_TIM_PWM_Start+0x1ac>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d009      	beq.n	80040fe <HAL_TIM_PWM_Start+0x162>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f2:	d004      	beq.n	80040fe <HAL_TIM_PWM_Start+0x162>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a14      	ldr	r2, [pc, #80]	; (800414c <HAL_TIM_PWM_Start+0x1b0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d115      	bne.n	800412a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	4b13      	ldr	r3, [pc, #76]	; (8004154 <HAL_TIM_PWM_Start+0x1b8>)
 8004106:	4013      	ands	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b06      	cmp	r3, #6
 800410e:	d015      	beq.n	800413c <HAL_TIM_PWM_Start+0x1a0>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004116:	d011      	beq.n	800413c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004128:	e008      	b.n	800413c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e000      	b.n	800413e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40014000 	.word	0x40014000
 8004150:	40014400 	.word	0x40014400
 8004154:	00010007 	.word	0x00010007

08004158 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004172:	2302      	movs	r3, #2
 8004174:	e0ff      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b14      	cmp	r3, #20
 8004182:	f200 80f0 	bhi.w	8004366 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	080041e1 	.word	0x080041e1
 8004190:	08004367 	.word	0x08004367
 8004194:	08004367 	.word	0x08004367
 8004198:	08004367 	.word	0x08004367
 800419c:	08004221 	.word	0x08004221
 80041a0:	08004367 	.word	0x08004367
 80041a4:	08004367 	.word	0x08004367
 80041a8:	08004367 	.word	0x08004367
 80041ac:	08004263 	.word	0x08004263
 80041b0:	08004367 	.word	0x08004367
 80041b4:	08004367 	.word	0x08004367
 80041b8:	08004367 	.word	0x08004367
 80041bc:	080042a3 	.word	0x080042a3
 80041c0:	08004367 	.word	0x08004367
 80041c4:	08004367 	.word	0x08004367
 80041c8:	08004367 	.word	0x08004367
 80041cc:	080042e5 	.word	0x080042e5
 80041d0:	08004367 	.word	0x08004367
 80041d4:	08004367 	.word	0x08004367
 80041d8:	08004367 	.word	0x08004367
 80041dc:	08004325 	.word	0x08004325
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f9f8 	bl	80045dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0208 	orr.w	r2, r2, #8
 80041fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0204 	bic.w	r2, r2, #4
 800420a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6999      	ldr	r1, [r3, #24]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	619a      	str	r2, [r3, #24]
      break;
 800421e:	e0a5      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fa54 	bl	80046d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800423a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6999      	ldr	r1, [r3, #24]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	021a      	lsls	r2, r3, #8
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	619a      	str	r2, [r3, #24]
      break;
 8004260:	e084      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 faad 	bl	80047c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0208 	orr.w	r2, r2, #8
 800427c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0204 	bic.w	r2, r2, #4
 800428c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69d9      	ldr	r1, [r3, #28]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	61da      	str	r2, [r3, #28]
      break;
 80042a0:	e064      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fb05 	bl	80048b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69d9      	ldr	r1, [r3, #28]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	021a      	lsls	r2, r3, #8
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	61da      	str	r2, [r3, #28]
      break;
 80042e2:	e043      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fb42 	bl	8004974 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0208 	orr.w	r2, r2, #8
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0204 	bic.w	r2, r2, #4
 800430e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004322:	e023      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fb7a 	bl	8004a24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800433e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	021a      	lsls	r2, r3, #8
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004364:	e002      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]
      break;
 800436a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004374:	7dfb      	ldrb	r3, [r7, #23]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop

08004380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_TIM_ConfigClockSource+0x1c>
 8004398:	2302      	movs	r3, #2
 800439a:	e0b6      	b.n	800450a <HAL_TIM_ConfigClockSource+0x18a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d8:	d03e      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0xd8>
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043de:	f200 8087 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e6:	f000 8086 	beq.w	80044f6 <HAL_TIM_ConfigClockSource+0x176>
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ee:	d87f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 80043f0:	2b70      	cmp	r3, #112	; 0x70
 80043f2:	d01a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xaa>
 80043f4:	2b70      	cmp	r3, #112	; 0x70
 80043f6:	d87b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 80043f8:	2b60      	cmp	r3, #96	; 0x60
 80043fa:	d050      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x11e>
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d877      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 8004400:	2b50      	cmp	r3, #80	; 0x50
 8004402:	d03c      	beq.n	800447e <HAL_TIM_ConfigClockSource+0xfe>
 8004404:	2b50      	cmp	r3, #80	; 0x50
 8004406:	d873      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	d058      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x13e>
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d86f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 8004410:	2b30      	cmp	r3, #48	; 0x30
 8004412:	d064      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15e>
 8004414:	2b30      	cmp	r3, #48	; 0x30
 8004416:	d86b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d060      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15e>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d867      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05c      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15e>
 8004424:	2b10      	cmp	r3, #16
 8004426:	d05a      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15e>
 8004428:	e062      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6899      	ldr	r1, [r3, #8]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f000 fbc7 	bl	8004bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800444c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	609a      	str	r2, [r3, #8]
      break;
 8004456:	e04f      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f000 fbb0 	bl	8004bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800447a:	609a      	str	r2, [r3, #8]
      break;
 800447c:	e03c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	f000 fb24 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2150      	movs	r1, #80	; 0x50
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fb7d 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 800449c:	e02c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 fb43 	bl	8004b36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2160      	movs	r1, #96	; 0x60
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fb6d 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 80044bc:	e01c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 fb04 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fb5d 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 80044dc:	e00c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f000 fb54 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 80044ee:	e003      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e000      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <TIM_Base_SetConfig+0xbc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_Base_SetConfig+0x20>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004532:	d108      	bne.n	8004546 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a21      	ldr	r2, [pc, #132]	; (80045d0 <TIM_Base_SetConfig+0xbc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00b      	beq.n	8004566 <TIM_Base_SetConfig+0x52>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004554:	d007      	beq.n	8004566 <TIM_Base_SetConfig+0x52>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <TIM_Base_SetConfig+0xc0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d003      	beq.n	8004566 <TIM_Base_SetConfig+0x52>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <TIM_Base_SetConfig+0xc4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d108      	bne.n	8004578 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a0c      	ldr	r2, [pc, #48]	; (80045d0 <TIM_Base_SetConfig+0xbc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0xa0>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a0b      	ldr	r2, [pc, #44]	; (80045d4 <TIM_Base_SetConfig+0xc0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0xa0>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <TIM_Base_SetConfig+0xc4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d103      	bne.n	80045bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	615a      	str	r2, [r3, #20]
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400

080045dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0201 	bic.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 0302 	bic.w	r3, r3, #2
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a24      	ldr	r2, [pc, #144]	; (80046c8 <TIM_OC1_SetConfig+0xec>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <TIM_OC1_SetConfig+0x70>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a23      	ldr	r2, [pc, #140]	; (80046cc <TIM_OC1_SetConfig+0xf0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_OC1_SetConfig+0x70>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a22      	ldr	r2, [pc, #136]	; (80046d0 <TIM_OC1_SetConfig+0xf4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d10c      	bne.n	8004666 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f023 0308 	bic.w	r3, r3, #8
 8004652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f023 0304 	bic.w	r3, r3, #4
 8004664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <TIM_OC1_SetConfig+0xec>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <TIM_OC1_SetConfig+0xa2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a16      	ldr	r2, [pc, #88]	; (80046cc <TIM_OC1_SetConfig+0xf0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_OC1_SetConfig+0xa2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <TIM_OC1_SetConfig+0xf4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d111      	bne.n	80046a2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800468c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	621a      	str	r2, [r3, #32]
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40014000 	.word	0x40014000
 80046d0:	40014400 	.word	0x40014400

080046d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f023 0210 	bic.w	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 0320 	bic.w	r3, r3, #32
 8004722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a22      	ldr	r2, [pc, #136]	; (80047bc <TIM_OC2_SetConfig+0xe8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d10d      	bne.n	8004754 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a19      	ldr	r2, [pc, #100]	; (80047bc <TIM_OC2_SetConfig+0xe8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d007      	beq.n	800476c <TIM_OC2_SetConfig+0x98>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a18      	ldr	r2, [pc, #96]	; (80047c0 <TIM_OC2_SetConfig+0xec>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_OC2_SetConfig+0x98>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <TIM_OC2_SetConfig+0xf0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d113      	bne.n	8004794 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004772:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800477a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400

080047c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0303 	bic.w	r3, r3, #3
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a21      	ldr	r2, [pc, #132]	; (80048ac <TIM_OC3_SetConfig+0xe4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d10d      	bne.n	8004846 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a18      	ldr	r2, [pc, #96]	; (80048ac <TIM_OC3_SetConfig+0xe4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d007      	beq.n	800485e <TIM_OC3_SetConfig+0x96>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <TIM_OC3_SetConfig+0xe8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d003      	beq.n	800485e <TIM_OC3_SetConfig+0x96>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <TIM_OC3_SetConfig+0xec>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d113      	bne.n	8004886 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800486c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	621a      	str	r2, [r3, #32]
}
 80048a0:	bf00      	nop
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	40012c00 	.word	0x40012c00
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40014400 	.word	0x40014400

080048b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	021b      	lsls	r3, r3, #8
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	031b      	lsls	r3, r3, #12
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a14      	ldr	r2, [pc, #80]	; (8004968 <TIM_OC4_SetConfig+0xb0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <TIM_OC4_SetConfig+0x74>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a13      	ldr	r2, [pc, #76]	; (800496c <TIM_OC4_SetConfig+0xb4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_OC4_SetConfig+0x74>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <TIM_OC4_SetConfig+0xb8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d109      	bne.n	8004940 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	019b      	lsls	r3, r3, #6
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40014000 	.word	0x40014000
 8004970:	40014400 	.word	0x40014400

08004974 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	041b      	lsls	r3, r3, #16
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <TIM_OC5_SetConfig+0xa4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <TIM_OC5_SetConfig+0x6a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <TIM_OC5_SetConfig+0xa8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_OC5_SetConfig+0x6a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <TIM_OC5_SetConfig+0xac>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d109      	bne.n	80049f2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	621a      	str	r2, [r3, #32]
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	40012c00 	.word	0x40012c00
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40014400 	.word	0x40014400

08004a24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	051b      	lsls	r3, r3, #20
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a14      	ldr	r2, [pc, #80]	; (8004acc <TIM_OC6_SetConfig+0xa8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_OC6_SetConfig+0x6c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <TIM_OC6_SetConfig+0xac>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_OC6_SetConfig+0x6c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a12      	ldr	r2, [pc, #72]	; (8004ad4 <TIM_OC6_SetConfig+0xb0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d109      	bne.n	8004aa4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	029b      	lsls	r3, r3, #10
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40014400 	.word	0x40014400

08004ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 0201 	bic.w	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 030a 	bic.w	r3, r3, #10
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b087      	sub	sp, #28
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f023 0210 	bic.w	r2, r3, #16
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	031b      	lsls	r3, r3, #12
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f043 0307 	orr.w	r3, r3, #7
 8004bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	609a      	str	r2, [r3, #8]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	021a      	lsls	r2, r3, #8
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2201      	movs	r2, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1a      	ldr	r2, [r3, #32]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	401a      	ands	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1a      	ldr	r2, [r3, #32]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	431a      	orrs	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e04f      	b.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d108      	bne.n	8004cac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ca0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d009      	beq.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd8:	d004      	beq.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a10      	ldr	r2, [pc, #64]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d10c      	bne.n	8004cfe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40014000 	.word	0x40014000

08004d24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e060      	b.n	8004e02 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d115      	bne.n	8004df0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	051b      	lsls	r3, r3, #20
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40012c00 	.word	0x40012c00

08004e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e040      	b.n	8004ea8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc f844 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2224      	movs	r2, #36	; 0x24
 8004e40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0201 	bic.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f8c0 	bl	8004fd8 <UART_SetConfig>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e022      	b.n	8004ea8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fae0 	bl	8005430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fb67 	bl	8005574 <UART_CheckIdleState>
 8004ea6:	4603      	mov	r3, r0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	f040 8082 	bne.w	8004fce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_UART_Transmit+0x26>
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e07a      	b.n	8004fd0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_UART_Transmit+0x38>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e073      	b.n	8004fd0 <HAL_UART_Transmit+0x120>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2221      	movs	r2, #33	; 0x21
 8004efc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004efe:	f7fc f94f 	bl	80011a0 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1c:	d108      	bne.n	8004f30 <HAL_UART_Transmit+0x80>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	e003      	b.n	8004f38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f40:	e02d      	b.n	8004f9e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2180      	movs	r1, #128	; 0x80
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fb5a 	bl	8005606 <UART_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e039      	b.n	8004fd0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	881a      	ldrh	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6e:	b292      	uxth	r2, r2
 8004f70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	3302      	adds	r3, #2
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e008      	b.n	8004f8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	781a      	ldrb	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	b292      	uxth	r2, r2
 8004f84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1cb      	bne.n	8004f42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2140      	movs	r1, #64	; 0x40
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fb26 	bl	8005606 <UART_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e005      	b.n	8004fd0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e000      	b.n	8004fd0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
  }
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fdc:	b08a      	sub	sp, #40	; 0x28
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4bb4      	ldr	r3, [pc, #720]	; (80052d8 <UART_SetConfig+0x300>)
 8005008:	4013      	ands	r3, r2
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	6812      	ldr	r2, [r2, #0]
 800500e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005010:	430b      	orrs	r3, r1
 8005012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4aa9      	ldr	r2, [pc, #676]	; (80052dc <UART_SetConfig+0x304>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005040:	4313      	orrs	r3, r2
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4aa0      	ldr	r2, [pc, #640]	; (80052e0 <UART_SetConfig+0x308>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d126      	bne.n	80050b0 <UART_SetConfig+0xd8>
 8005062:	4ba0      	ldr	r3, [pc, #640]	; (80052e4 <UART_SetConfig+0x30c>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	2b03      	cmp	r3, #3
 800506e:	d81b      	bhi.n	80050a8 <UART_SetConfig+0xd0>
 8005070:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <UART_SetConfig+0xa0>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	08005089 	.word	0x08005089
 800507c:	08005099 	.word	0x08005099
 8005080:	08005091 	.word	0x08005091
 8005084:	080050a1 	.word	0x080050a1
 8005088:	2301      	movs	r3, #1
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508e:	e080      	b.n	8005192 <UART_SetConfig+0x1ba>
 8005090:	2302      	movs	r3, #2
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005096:	e07c      	b.n	8005192 <UART_SetConfig+0x1ba>
 8005098:	2304      	movs	r3, #4
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509e:	e078      	b.n	8005192 <UART_SetConfig+0x1ba>
 80050a0:	2308      	movs	r3, #8
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a6:	e074      	b.n	8005192 <UART_SetConfig+0x1ba>
 80050a8:	2310      	movs	r3, #16
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ae:	e070      	b.n	8005192 <UART_SetConfig+0x1ba>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a8c      	ldr	r2, [pc, #560]	; (80052e8 <UART_SetConfig+0x310>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d138      	bne.n	800512c <UART_SetConfig+0x154>
 80050ba:	4b8a      	ldr	r3, [pc, #552]	; (80052e4 <UART_SetConfig+0x30c>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c0:	f003 030c 	and.w	r3, r3, #12
 80050c4:	2b0c      	cmp	r3, #12
 80050c6:	d82d      	bhi.n	8005124 <UART_SetConfig+0x14c>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0xf8>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	08005105 	.word	0x08005105
 80050d4:	08005125 	.word	0x08005125
 80050d8:	08005125 	.word	0x08005125
 80050dc:	08005125 	.word	0x08005125
 80050e0:	08005115 	.word	0x08005115
 80050e4:	08005125 	.word	0x08005125
 80050e8:	08005125 	.word	0x08005125
 80050ec:	08005125 	.word	0x08005125
 80050f0:	0800510d 	.word	0x0800510d
 80050f4:	08005125 	.word	0x08005125
 80050f8:	08005125 	.word	0x08005125
 80050fc:	08005125 	.word	0x08005125
 8005100:	0800511d 	.word	0x0800511d
 8005104:	2300      	movs	r3, #0
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510a:	e042      	b.n	8005192 <UART_SetConfig+0x1ba>
 800510c:	2302      	movs	r3, #2
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005112:	e03e      	b.n	8005192 <UART_SetConfig+0x1ba>
 8005114:	2304      	movs	r3, #4
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511a:	e03a      	b.n	8005192 <UART_SetConfig+0x1ba>
 800511c:	2308      	movs	r3, #8
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005122:	e036      	b.n	8005192 <UART_SetConfig+0x1ba>
 8005124:	2310      	movs	r3, #16
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512a:	e032      	b.n	8005192 <UART_SetConfig+0x1ba>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a6a      	ldr	r2, [pc, #424]	; (80052dc <UART_SetConfig+0x304>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d12a      	bne.n	800518c <UART_SetConfig+0x1b4>
 8005136:	4b6b      	ldr	r3, [pc, #428]	; (80052e4 <UART_SetConfig+0x30c>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005144:	d01a      	beq.n	800517c <UART_SetConfig+0x1a4>
 8005146:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800514a:	d81b      	bhi.n	8005184 <UART_SetConfig+0x1ac>
 800514c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005150:	d00c      	beq.n	800516c <UART_SetConfig+0x194>
 8005152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005156:	d815      	bhi.n	8005184 <UART_SetConfig+0x1ac>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <UART_SetConfig+0x18c>
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005160:	d008      	beq.n	8005174 <UART_SetConfig+0x19c>
 8005162:	e00f      	b.n	8005184 <UART_SetConfig+0x1ac>
 8005164:	2300      	movs	r3, #0
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e012      	b.n	8005192 <UART_SetConfig+0x1ba>
 800516c:	2302      	movs	r3, #2
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005172:	e00e      	b.n	8005192 <UART_SetConfig+0x1ba>
 8005174:	2304      	movs	r3, #4
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517a:	e00a      	b.n	8005192 <UART_SetConfig+0x1ba>
 800517c:	2308      	movs	r3, #8
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	e006      	b.n	8005192 <UART_SetConfig+0x1ba>
 8005184:	2310      	movs	r3, #16
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518a:	e002      	b.n	8005192 <UART_SetConfig+0x1ba>
 800518c:	2310      	movs	r3, #16
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a51      	ldr	r2, [pc, #324]	; (80052dc <UART_SetConfig+0x304>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d17a      	bne.n	8005292 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800519c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d824      	bhi.n	80051ee <UART_SetConfig+0x216>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <UART_SetConfig+0x1d4>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	080051ef 	.word	0x080051ef
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051ef 	.word	0x080051ef
 80051bc:	080051df 	.word	0x080051df
 80051c0:	080051ef 	.word	0x080051ef
 80051c4:	080051ef 	.word	0x080051ef
 80051c8:	080051ef 	.word	0x080051ef
 80051cc:	080051e7 	.word	0x080051e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d0:	f7fe fab8 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 80051d4:	61f8      	str	r0, [r7, #28]
        break;
 80051d6:	e010      	b.n	80051fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d8:	4b44      	ldr	r3, [pc, #272]	; (80052ec <UART_SetConfig+0x314>)
 80051da:	61fb      	str	r3, [r7, #28]
        break;
 80051dc:	e00d      	b.n	80051fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051de:	f7fe fa19 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80051e2:	61f8      	str	r0, [r7, #28]
        break;
 80051e4:	e009      	b.n	80051fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ea:	61fb      	str	r3, [r7, #28]
        break;
 80051ec:	e005      	b.n	80051fa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8107 	beq.w	8005410 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	4413      	add	r3, r2
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	429a      	cmp	r2, r3
 8005210:	d305      	bcc.n	800521e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	429a      	cmp	r2, r3
 800521c:	d903      	bls.n	8005226 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005224:	e0f4      	b.n	8005410 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	2200      	movs	r2, #0
 800522a:	461c      	mov	r4, r3
 800522c:	4615      	mov	r5, r2
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	022b      	lsls	r3, r5, #8
 8005238:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800523c:	0222      	lsls	r2, r4, #8
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	6849      	ldr	r1, [r1, #4]
 8005242:	0849      	lsrs	r1, r1, #1
 8005244:	2000      	movs	r0, #0
 8005246:	4688      	mov	r8, r1
 8005248:	4681      	mov	r9, r0
 800524a:	eb12 0a08 	adds.w	sl, r2, r8
 800524e:	eb43 0b09 	adc.w	fp, r3, r9
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005260:	4650      	mov	r0, sl
 8005262:	4659      	mov	r1, fp
 8005264:	f7fb f80c 	bl	8000280 <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4613      	mov	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005276:	d308      	bcc.n	800528a <UART_SetConfig+0x2b2>
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527e:	d204      	bcs.n	800528a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	60da      	str	r2, [r3, #12]
 8005288:	e0c2      	b.n	8005410 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005290:	e0be      	b.n	8005410 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529a:	d16a      	bne.n	8005372 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800529c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d834      	bhi.n	800530e <UART_SetConfig+0x336>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x2d4>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052f1 	.word	0x080052f1
 80052b4:	080052f9 	.word	0x080052f9
 80052b8:	0800530f 	.word	0x0800530f
 80052bc:	080052ff 	.word	0x080052ff
 80052c0:	0800530f 	.word	0x0800530f
 80052c4:	0800530f 	.word	0x0800530f
 80052c8:	0800530f 	.word	0x0800530f
 80052cc:	08005307 	.word	0x08005307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7fe fa38 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 80052d4:	61f8      	str	r0, [r7, #28]
        break;
 80052d6:	e020      	b.n	800531a <UART_SetConfig+0x342>
 80052d8:	efff69f3 	.word	0xefff69f3
 80052dc:	40008000 	.word	0x40008000
 80052e0:	40013800 	.word	0x40013800
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40004400 	.word	0x40004400
 80052ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f0:	f7fe fa3e 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 80052f4:	61f8      	str	r0, [r7, #28]
        break;
 80052f6:	e010      	b.n	800531a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f8:	4b4c      	ldr	r3, [pc, #304]	; (800542c <UART_SetConfig+0x454>)
 80052fa:	61fb      	str	r3, [r7, #28]
        break;
 80052fc:	e00d      	b.n	800531a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fe:	f7fe f989 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 8005302:	61f8      	str	r0, [r7, #28]
        break;
 8005304:	e009      	b.n	800531a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530a:	61fb      	str	r3, [r7, #28]
        break;
 800530c:	e005      	b.n	800531a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005318:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d077      	beq.n	8005410 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	005a      	lsls	r2, r3, #1
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	441a      	add	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	fbb2 f3f3 	udiv	r3, r2, r3
 8005334:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b0f      	cmp	r3, #15
 800533a:	d916      	bls.n	800536a <UART_SetConfig+0x392>
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005342:	d212      	bcs.n	800536a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f023 030f 	bic.w	r3, r3, #15
 800534c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	085b      	lsrs	r3, r3, #1
 8005352:	b29b      	uxth	r3, r3
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	b29a      	uxth	r2, r3
 800535a:	8afb      	ldrh	r3, [r7, #22]
 800535c:	4313      	orrs	r3, r2
 800535e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	8afa      	ldrh	r2, [r7, #22]
 8005366:	60da      	str	r2, [r3, #12]
 8005368:	e052      	b.n	8005410 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005370:	e04e      	b.n	8005410 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005376:	2b08      	cmp	r3, #8
 8005378:	d827      	bhi.n	80053ca <UART_SetConfig+0x3f2>
 800537a:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <UART_SetConfig+0x3a8>)
 800537c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053ad 	.word	0x080053ad
 8005388:	080053b5 	.word	0x080053b5
 800538c:	080053cb 	.word	0x080053cb
 8005390:	080053bb 	.word	0x080053bb
 8005394:	080053cb 	.word	0x080053cb
 8005398:	080053cb 	.word	0x080053cb
 800539c:	080053cb 	.word	0x080053cb
 80053a0:	080053c3 	.word	0x080053c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a4:	f7fe f9ce 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 80053a8:	61f8      	str	r0, [r7, #28]
        break;
 80053aa:	e014      	b.n	80053d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053ac:	f7fe f9e0 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 80053b0:	61f8      	str	r0, [r7, #28]
        break;
 80053b2:	e010      	b.n	80053d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b4:	4b1d      	ldr	r3, [pc, #116]	; (800542c <UART_SetConfig+0x454>)
 80053b6:	61fb      	str	r3, [r7, #28]
        break;
 80053b8:	e00d      	b.n	80053d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ba:	f7fe f92b 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80053be:	61f8      	str	r0, [r7, #28]
        break;
 80053c0:	e009      	b.n	80053d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053c6:	61fb      	str	r3, [r7, #28]
        break;
 80053c8:	e005      	b.n	80053d6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053d4:	bf00      	nop
    }

    if (pclk != 0U)
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d019      	beq.n	8005410 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	085a      	lsrs	r2, r3, #1
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	441a      	add	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b0f      	cmp	r3, #15
 80053f4:	d909      	bls.n	800540a <UART_SetConfig+0x432>
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d205      	bcs.n	800540a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60da      	str	r2, [r3, #12]
 8005408:	e002      	b.n	8005410 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800541c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005420:	4618      	mov	r0, r3
 8005422:	3728      	adds	r7, #40	; 0x28
 8005424:	46bd      	mov	sp, r7
 8005426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800542a:	bf00      	nop
 800542c:	00f42400 	.word	0x00f42400

08005430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01a      	beq.n	8005546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552e:	d10a      	bne.n	8005546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	605a      	str	r2, [r3, #4]
  }
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af02      	add	r7, sp, #8
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005584:	f7fb fe0c 	bl	80011a0 <HAL_GetTick>
 8005588:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b08      	cmp	r3, #8
 8005596:	d10e      	bne.n	80055b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f82d 	bl	8005606 <UART_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e023      	b.n	80055fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d10e      	bne.n	80055e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f817 	bl	8005606 <UART_WaitOnFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e00d      	b.n	80055fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b09c      	sub	sp, #112	; 0x70
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	4613      	mov	r3, r2
 8005614:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005616:	e0a5      	b.n	8005764 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	f000 80a1 	beq.w	8005764 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005622:	f7fb fdbd 	bl	80011a0 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800562e:	429a      	cmp	r2, r3
 8005630:	d302      	bcc.n	8005638 <UART_WaitOnFlagUntilTimeout+0x32>
 8005632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005634:	2b00      	cmp	r3, #0
 8005636:	d13e      	bne.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005648:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800564c:	667b      	str	r3, [r7, #100]	; 0x64
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005658:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800565c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e6      	bne.n	8005638 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3308      	adds	r3, #8
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	663b      	str	r3, [r7, #96]	; 0x60
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800568a:	64ba      	str	r2, [r7, #72]	; 0x48
 800568c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e5      	bne.n	800566a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e067      	b.n	8005786 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d04f      	beq.n	8005764 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d2:	d147      	bne.n	8005764 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fc:	637b      	str	r3, [r7, #52]	; 0x34
 80056fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e6      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3308      	adds	r3, #8
 8005716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	613b      	str	r3, [r7, #16]
   return(result);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	66bb      	str	r3, [r7, #104]	; 0x68
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3308      	adds	r3, #8
 800572e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005730:	623a      	str	r2, [r7, #32]
 8005732:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	69f9      	ldr	r1, [r7, #28]
 8005736:	6a3a      	ldr	r2, [r7, #32]
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	61bb      	str	r3, [r7, #24]
   return(result);
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e5      	bne.n	8005710 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2220      	movs	r2, #32
 800574e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e010      	b.n	8005786 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	69da      	ldr	r2, [r3, #28]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	4013      	ands	r3, r2
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	429a      	cmp	r2, r3
 8005772:	bf0c      	ite	eq
 8005774:	2301      	moveq	r3, #1
 8005776:	2300      	movne	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	429a      	cmp	r2, r3
 8005780:	f43f af4a 	beq.w	8005618 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3770      	adds	r7, #112	; 0x70
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <__errno>:
 8005790:	4b01      	ldr	r3, [pc, #4]	; (8005798 <__errno+0x8>)
 8005792:	6818      	ldr	r0, [r3, #0]
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	2000000c 	.word	0x2000000c

0800579c <__libc_init_array>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	4d0d      	ldr	r5, [pc, #52]	; (80057d4 <__libc_init_array+0x38>)
 80057a0:	4c0d      	ldr	r4, [pc, #52]	; (80057d8 <__libc_init_array+0x3c>)
 80057a2:	1b64      	subs	r4, r4, r5
 80057a4:	10a4      	asrs	r4, r4, #2
 80057a6:	2600      	movs	r6, #0
 80057a8:	42a6      	cmp	r6, r4
 80057aa:	d109      	bne.n	80057c0 <__libc_init_array+0x24>
 80057ac:	4d0b      	ldr	r5, [pc, #44]	; (80057dc <__libc_init_array+0x40>)
 80057ae:	4c0c      	ldr	r4, [pc, #48]	; (80057e0 <__libc_init_array+0x44>)
 80057b0:	f000 fc8e 	bl	80060d0 <_init>
 80057b4:	1b64      	subs	r4, r4, r5
 80057b6:	10a4      	asrs	r4, r4, #2
 80057b8:	2600      	movs	r6, #0
 80057ba:	42a6      	cmp	r6, r4
 80057bc:	d105      	bne.n	80057ca <__libc_init_array+0x2e>
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c4:	4798      	blx	r3
 80057c6:	3601      	adds	r6, #1
 80057c8:	e7ee      	b.n	80057a8 <__libc_init_array+0xc>
 80057ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ce:	4798      	blx	r3
 80057d0:	3601      	adds	r6, #1
 80057d2:	e7f2      	b.n	80057ba <__libc_init_array+0x1e>
 80057d4:	08006190 	.word	0x08006190
 80057d8:	08006190 	.word	0x08006190
 80057dc:	08006190 	.word	0x08006190
 80057e0:	08006194 	.word	0x08006194

080057e4 <memset>:
 80057e4:	4402      	add	r2, r0
 80057e6:	4603      	mov	r3, r0
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d100      	bne.n	80057ee <memset+0xa>
 80057ec:	4770      	bx	lr
 80057ee:	f803 1b01 	strb.w	r1, [r3], #1
 80057f2:	e7f9      	b.n	80057e8 <memset+0x4>

080057f4 <siprintf>:
 80057f4:	b40e      	push	{r1, r2, r3}
 80057f6:	b500      	push	{lr}
 80057f8:	b09c      	sub	sp, #112	; 0x70
 80057fa:	ab1d      	add	r3, sp, #116	; 0x74
 80057fc:	9002      	str	r0, [sp, #8]
 80057fe:	9006      	str	r0, [sp, #24]
 8005800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005804:	4809      	ldr	r0, [pc, #36]	; (800582c <siprintf+0x38>)
 8005806:	9107      	str	r1, [sp, #28]
 8005808:	9104      	str	r1, [sp, #16]
 800580a:	4909      	ldr	r1, [pc, #36]	; (8005830 <siprintf+0x3c>)
 800580c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005810:	9105      	str	r1, [sp, #20]
 8005812:	6800      	ldr	r0, [r0, #0]
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	a902      	add	r1, sp, #8
 8005818:	f000 f868 	bl	80058ec <_svfiprintf_r>
 800581c:	9b02      	ldr	r3, [sp, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	b01c      	add	sp, #112	; 0x70
 8005824:	f85d eb04 	ldr.w	lr, [sp], #4
 8005828:	b003      	add	sp, #12
 800582a:	4770      	bx	lr
 800582c:	2000000c 	.word	0x2000000c
 8005830:	ffff0208 	.word	0xffff0208

08005834 <__ssputs_r>:
 8005834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	688e      	ldr	r6, [r1, #8]
 800583a:	429e      	cmp	r6, r3
 800583c:	4682      	mov	sl, r0
 800583e:	460c      	mov	r4, r1
 8005840:	4690      	mov	r8, r2
 8005842:	461f      	mov	r7, r3
 8005844:	d838      	bhi.n	80058b8 <__ssputs_r+0x84>
 8005846:	898a      	ldrh	r2, [r1, #12]
 8005848:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800584c:	d032      	beq.n	80058b4 <__ssputs_r+0x80>
 800584e:	6825      	ldr	r5, [r4, #0]
 8005850:	6909      	ldr	r1, [r1, #16]
 8005852:	eba5 0901 	sub.w	r9, r5, r1
 8005856:	6965      	ldr	r5, [r4, #20]
 8005858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800585c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005860:	3301      	adds	r3, #1
 8005862:	444b      	add	r3, r9
 8005864:	106d      	asrs	r5, r5, #1
 8005866:	429d      	cmp	r5, r3
 8005868:	bf38      	it	cc
 800586a:	461d      	movcc	r5, r3
 800586c:	0553      	lsls	r3, r2, #21
 800586e:	d531      	bpl.n	80058d4 <__ssputs_r+0xa0>
 8005870:	4629      	mov	r1, r5
 8005872:	f000 fb63 	bl	8005f3c <_malloc_r>
 8005876:	4606      	mov	r6, r0
 8005878:	b950      	cbnz	r0, 8005890 <__ssputs_r+0x5c>
 800587a:	230c      	movs	r3, #12
 800587c:	f8ca 3000 	str.w	r3, [sl]
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	f04f 30ff 	mov.w	r0, #4294967295
 800588c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005890:	6921      	ldr	r1, [r4, #16]
 8005892:	464a      	mov	r2, r9
 8005894:	f000 fabe 	bl	8005e14 <memcpy>
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800589e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a2:	81a3      	strh	r3, [r4, #12]
 80058a4:	6126      	str	r6, [r4, #16]
 80058a6:	6165      	str	r5, [r4, #20]
 80058a8:	444e      	add	r6, r9
 80058aa:	eba5 0509 	sub.w	r5, r5, r9
 80058ae:	6026      	str	r6, [r4, #0]
 80058b0:	60a5      	str	r5, [r4, #8]
 80058b2:	463e      	mov	r6, r7
 80058b4:	42be      	cmp	r6, r7
 80058b6:	d900      	bls.n	80058ba <__ssputs_r+0x86>
 80058b8:	463e      	mov	r6, r7
 80058ba:	6820      	ldr	r0, [r4, #0]
 80058bc:	4632      	mov	r2, r6
 80058be:	4641      	mov	r1, r8
 80058c0:	f000 fab6 	bl	8005e30 <memmove>
 80058c4:	68a3      	ldr	r3, [r4, #8]
 80058c6:	1b9b      	subs	r3, r3, r6
 80058c8:	60a3      	str	r3, [r4, #8]
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	4433      	add	r3, r6
 80058ce:	6023      	str	r3, [r4, #0]
 80058d0:	2000      	movs	r0, #0
 80058d2:	e7db      	b.n	800588c <__ssputs_r+0x58>
 80058d4:	462a      	mov	r2, r5
 80058d6:	f000 fba5 	bl	8006024 <_realloc_r>
 80058da:	4606      	mov	r6, r0
 80058dc:	2800      	cmp	r0, #0
 80058de:	d1e1      	bne.n	80058a4 <__ssputs_r+0x70>
 80058e0:	6921      	ldr	r1, [r4, #16]
 80058e2:	4650      	mov	r0, sl
 80058e4:	f000 fabe 	bl	8005e64 <_free_r>
 80058e8:	e7c7      	b.n	800587a <__ssputs_r+0x46>
	...

080058ec <_svfiprintf_r>:
 80058ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	4698      	mov	r8, r3
 80058f2:	898b      	ldrh	r3, [r1, #12]
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	b09d      	sub	sp, #116	; 0x74
 80058f8:	4607      	mov	r7, r0
 80058fa:	460d      	mov	r5, r1
 80058fc:	4614      	mov	r4, r2
 80058fe:	d50e      	bpl.n	800591e <_svfiprintf_r+0x32>
 8005900:	690b      	ldr	r3, [r1, #16]
 8005902:	b963      	cbnz	r3, 800591e <_svfiprintf_r+0x32>
 8005904:	2140      	movs	r1, #64	; 0x40
 8005906:	f000 fb19 	bl	8005f3c <_malloc_r>
 800590a:	6028      	str	r0, [r5, #0]
 800590c:	6128      	str	r0, [r5, #16]
 800590e:	b920      	cbnz	r0, 800591a <_svfiprintf_r+0x2e>
 8005910:	230c      	movs	r3, #12
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	e0d1      	b.n	8005abe <_svfiprintf_r+0x1d2>
 800591a:	2340      	movs	r3, #64	; 0x40
 800591c:	616b      	str	r3, [r5, #20]
 800591e:	2300      	movs	r3, #0
 8005920:	9309      	str	r3, [sp, #36]	; 0x24
 8005922:	2320      	movs	r3, #32
 8005924:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005928:	f8cd 800c 	str.w	r8, [sp, #12]
 800592c:	2330      	movs	r3, #48	; 0x30
 800592e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ad8 <_svfiprintf_r+0x1ec>
 8005932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005936:	f04f 0901 	mov.w	r9, #1
 800593a:	4623      	mov	r3, r4
 800593c:	469a      	mov	sl, r3
 800593e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005942:	b10a      	cbz	r2, 8005948 <_svfiprintf_r+0x5c>
 8005944:	2a25      	cmp	r2, #37	; 0x25
 8005946:	d1f9      	bne.n	800593c <_svfiprintf_r+0x50>
 8005948:	ebba 0b04 	subs.w	fp, sl, r4
 800594c:	d00b      	beq.n	8005966 <_svfiprintf_r+0x7a>
 800594e:	465b      	mov	r3, fp
 8005950:	4622      	mov	r2, r4
 8005952:	4629      	mov	r1, r5
 8005954:	4638      	mov	r0, r7
 8005956:	f7ff ff6d 	bl	8005834 <__ssputs_r>
 800595a:	3001      	adds	r0, #1
 800595c:	f000 80aa 	beq.w	8005ab4 <_svfiprintf_r+0x1c8>
 8005960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005962:	445a      	add	r2, fp
 8005964:	9209      	str	r2, [sp, #36]	; 0x24
 8005966:	f89a 3000 	ldrb.w	r3, [sl]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 80a2 	beq.w	8005ab4 <_svfiprintf_r+0x1c8>
 8005970:	2300      	movs	r3, #0
 8005972:	f04f 32ff 	mov.w	r2, #4294967295
 8005976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800597a:	f10a 0a01 	add.w	sl, sl, #1
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	9307      	str	r3, [sp, #28]
 8005982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005986:	931a      	str	r3, [sp, #104]	; 0x68
 8005988:	4654      	mov	r4, sl
 800598a:	2205      	movs	r2, #5
 800598c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005990:	4851      	ldr	r0, [pc, #324]	; (8005ad8 <_svfiprintf_r+0x1ec>)
 8005992:	f7fa fc25 	bl	80001e0 <memchr>
 8005996:	9a04      	ldr	r2, [sp, #16]
 8005998:	b9d8      	cbnz	r0, 80059d2 <_svfiprintf_r+0xe6>
 800599a:	06d0      	lsls	r0, r2, #27
 800599c:	bf44      	itt	mi
 800599e:	2320      	movmi	r3, #32
 80059a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059a4:	0711      	lsls	r1, r2, #28
 80059a6:	bf44      	itt	mi
 80059a8:	232b      	movmi	r3, #43	; 0x2b
 80059aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ae:	f89a 3000 	ldrb.w	r3, [sl]
 80059b2:	2b2a      	cmp	r3, #42	; 0x2a
 80059b4:	d015      	beq.n	80059e2 <_svfiprintf_r+0xf6>
 80059b6:	9a07      	ldr	r2, [sp, #28]
 80059b8:	4654      	mov	r4, sl
 80059ba:	2000      	movs	r0, #0
 80059bc:	f04f 0c0a 	mov.w	ip, #10
 80059c0:	4621      	mov	r1, r4
 80059c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059c6:	3b30      	subs	r3, #48	; 0x30
 80059c8:	2b09      	cmp	r3, #9
 80059ca:	d94e      	bls.n	8005a6a <_svfiprintf_r+0x17e>
 80059cc:	b1b0      	cbz	r0, 80059fc <_svfiprintf_r+0x110>
 80059ce:	9207      	str	r2, [sp, #28]
 80059d0:	e014      	b.n	80059fc <_svfiprintf_r+0x110>
 80059d2:	eba0 0308 	sub.w	r3, r0, r8
 80059d6:	fa09 f303 	lsl.w	r3, r9, r3
 80059da:	4313      	orrs	r3, r2
 80059dc:	9304      	str	r3, [sp, #16]
 80059de:	46a2      	mov	sl, r4
 80059e0:	e7d2      	b.n	8005988 <_svfiprintf_r+0x9c>
 80059e2:	9b03      	ldr	r3, [sp, #12]
 80059e4:	1d19      	adds	r1, r3, #4
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	9103      	str	r1, [sp, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bfbb      	ittet	lt
 80059ee:	425b      	neglt	r3, r3
 80059f0:	f042 0202 	orrlt.w	r2, r2, #2
 80059f4:	9307      	strge	r3, [sp, #28]
 80059f6:	9307      	strlt	r3, [sp, #28]
 80059f8:	bfb8      	it	lt
 80059fa:	9204      	strlt	r2, [sp, #16]
 80059fc:	7823      	ldrb	r3, [r4, #0]
 80059fe:	2b2e      	cmp	r3, #46	; 0x2e
 8005a00:	d10c      	bne.n	8005a1c <_svfiprintf_r+0x130>
 8005a02:	7863      	ldrb	r3, [r4, #1]
 8005a04:	2b2a      	cmp	r3, #42	; 0x2a
 8005a06:	d135      	bne.n	8005a74 <_svfiprintf_r+0x188>
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	1d1a      	adds	r2, r3, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	9203      	str	r2, [sp, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bfb8      	it	lt
 8005a14:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a18:	3402      	adds	r4, #2
 8005a1a:	9305      	str	r3, [sp, #20]
 8005a1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ae8 <_svfiprintf_r+0x1fc>
 8005a20:	7821      	ldrb	r1, [r4, #0]
 8005a22:	2203      	movs	r2, #3
 8005a24:	4650      	mov	r0, sl
 8005a26:	f7fa fbdb 	bl	80001e0 <memchr>
 8005a2a:	b140      	cbz	r0, 8005a3e <_svfiprintf_r+0x152>
 8005a2c:	2340      	movs	r3, #64	; 0x40
 8005a2e:	eba0 000a 	sub.w	r0, r0, sl
 8005a32:	fa03 f000 	lsl.w	r0, r3, r0
 8005a36:	9b04      	ldr	r3, [sp, #16]
 8005a38:	4303      	orrs	r3, r0
 8005a3a:	3401      	adds	r4, #1
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a42:	4826      	ldr	r0, [pc, #152]	; (8005adc <_svfiprintf_r+0x1f0>)
 8005a44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a48:	2206      	movs	r2, #6
 8005a4a:	f7fa fbc9 	bl	80001e0 <memchr>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d038      	beq.n	8005ac4 <_svfiprintf_r+0x1d8>
 8005a52:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <_svfiprintf_r+0x1f4>)
 8005a54:	bb1b      	cbnz	r3, 8005a9e <_svfiprintf_r+0x1b2>
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	3307      	adds	r3, #7
 8005a5a:	f023 0307 	bic.w	r3, r3, #7
 8005a5e:	3308      	adds	r3, #8
 8005a60:	9303      	str	r3, [sp, #12]
 8005a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a64:	4433      	add	r3, r6
 8005a66:	9309      	str	r3, [sp, #36]	; 0x24
 8005a68:	e767      	b.n	800593a <_svfiprintf_r+0x4e>
 8005a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a6e:	460c      	mov	r4, r1
 8005a70:	2001      	movs	r0, #1
 8005a72:	e7a5      	b.n	80059c0 <_svfiprintf_r+0xd4>
 8005a74:	2300      	movs	r3, #0
 8005a76:	3401      	adds	r4, #1
 8005a78:	9305      	str	r3, [sp, #20]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	f04f 0c0a 	mov.w	ip, #10
 8005a80:	4620      	mov	r0, r4
 8005a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a86:	3a30      	subs	r2, #48	; 0x30
 8005a88:	2a09      	cmp	r2, #9
 8005a8a:	d903      	bls.n	8005a94 <_svfiprintf_r+0x1a8>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0c5      	beq.n	8005a1c <_svfiprintf_r+0x130>
 8005a90:	9105      	str	r1, [sp, #20]
 8005a92:	e7c3      	b.n	8005a1c <_svfiprintf_r+0x130>
 8005a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a98:	4604      	mov	r4, r0
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e7f0      	b.n	8005a80 <_svfiprintf_r+0x194>
 8005a9e:	ab03      	add	r3, sp, #12
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	462a      	mov	r2, r5
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <_svfiprintf_r+0x1f8>)
 8005aa6:	a904      	add	r1, sp, #16
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f3af 8000 	nop.w
 8005aae:	1c42      	adds	r2, r0, #1
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	d1d6      	bne.n	8005a62 <_svfiprintf_r+0x176>
 8005ab4:	89ab      	ldrh	r3, [r5, #12]
 8005ab6:	065b      	lsls	r3, r3, #25
 8005ab8:	f53f af2c 	bmi.w	8005914 <_svfiprintf_r+0x28>
 8005abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005abe:	b01d      	add	sp, #116	; 0x74
 8005ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac4:	ab03      	add	r3, sp, #12
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	462a      	mov	r2, r5
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <_svfiprintf_r+0x1f8>)
 8005acc:	a904      	add	r1, sp, #16
 8005ace:	4638      	mov	r0, r7
 8005ad0:	f000 f87a 	bl	8005bc8 <_printf_i>
 8005ad4:	e7eb      	b.n	8005aae <_svfiprintf_r+0x1c2>
 8005ad6:	bf00      	nop
 8005ad8:	08006154 	.word	0x08006154
 8005adc:	0800615e 	.word	0x0800615e
 8005ae0:	00000000 	.word	0x00000000
 8005ae4:	08005835 	.word	0x08005835
 8005ae8:	0800615a 	.word	0x0800615a

08005aec <_printf_common>:
 8005aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af0:	4616      	mov	r6, r2
 8005af2:	4699      	mov	r9, r3
 8005af4:	688a      	ldr	r2, [r1, #8]
 8005af6:	690b      	ldr	r3, [r1, #16]
 8005af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005afc:	4293      	cmp	r3, r2
 8005afe:	bfb8      	it	lt
 8005b00:	4613      	movlt	r3, r2
 8005b02:	6033      	str	r3, [r6, #0]
 8005b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b08:	4607      	mov	r7, r0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	b10a      	cbz	r2, 8005b12 <_printf_common+0x26>
 8005b0e:	3301      	adds	r3, #1
 8005b10:	6033      	str	r3, [r6, #0]
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	0699      	lsls	r1, r3, #26
 8005b16:	bf42      	ittt	mi
 8005b18:	6833      	ldrmi	r3, [r6, #0]
 8005b1a:	3302      	addmi	r3, #2
 8005b1c:	6033      	strmi	r3, [r6, #0]
 8005b1e:	6825      	ldr	r5, [r4, #0]
 8005b20:	f015 0506 	ands.w	r5, r5, #6
 8005b24:	d106      	bne.n	8005b34 <_printf_common+0x48>
 8005b26:	f104 0a19 	add.w	sl, r4, #25
 8005b2a:	68e3      	ldr	r3, [r4, #12]
 8005b2c:	6832      	ldr	r2, [r6, #0]
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	42ab      	cmp	r3, r5
 8005b32:	dc26      	bgt.n	8005b82 <_printf_common+0x96>
 8005b34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b38:	1e13      	subs	r3, r2, #0
 8005b3a:	6822      	ldr	r2, [r4, #0]
 8005b3c:	bf18      	it	ne
 8005b3e:	2301      	movne	r3, #1
 8005b40:	0692      	lsls	r2, r2, #26
 8005b42:	d42b      	bmi.n	8005b9c <_printf_common+0xb0>
 8005b44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b48:	4649      	mov	r1, r9
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	47c0      	blx	r8
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d01e      	beq.n	8005b90 <_printf_common+0xa4>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	68e5      	ldr	r5, [r4, #12]
 8005b56:	6832      	ldr	r2, [r6, #0]
 8005b58:	f003 0306 	and.w	r3, r3, #6
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	bf08      	it	eq
 8005b60:	1aad      	subeq	r5, r5, r2
 8005b62:	68a3      	ldr	r3, [r4, #8]
 8005b64:	6922      	ldr	r2, [r4, #16]
 8005b66:	bf0c      	ite	eq
 8005b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b6c:	2500      	movne	r5, #0
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	bfc4      	itt	gt
 8005b72:	1a9b      	subgt	r3, r3, r2
 8005b74:	18ed      	addgt	r5, r5, r3
 8005b76:	2600      	movs	r6, #0
 8005b78:	341a      	adds	r4, #26
 8005b7a:	42b5      	cmp	r5, r6
 8005b7c:	d11a      	bne.n	8005bb4 <_printf_common+0xc8>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e008      	b.n	8005b94 <_printf_common+0xa8>
 8005b82:	2301      	movs	r3, #1
 8005b84:	4652      	mov	r2, sl
 8005b86:	4649      	mov	r1, r9
 8005b88:	4638      	mov	r0, r7
 8005b8a:	47c0      	blx	r8
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d103      	bne.n	8005b98 <_printf_common+0xac>
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b98:	3501      	adds	r5, #1
 8005b9a:	e7c6      	b.n	8005b2a <_printf_common+0x3e>
 8005b9c:	18e1      	adds	r1, r4, r3
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	2030      	movs	r0, #48	; 0x30
 8005ba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ba6:	4422      	add	r2, r4
 8005ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bb0:	3302      	adds	r3, #2
 8005bb2:	e7c7      	b.n	8005b44 <_printf_common+0x58>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	4649      	mov	r1, r9
 8005bba:	4638      	mov	r0, r7
 8005bbc:	47c0      	blx	r8
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	d0e6      	beq.n	8005b90 <_printf_common+0xa4>
 8005bc2:	3601      	adds	r6, #1
 8005bc4:	e7d9      	b.n	8005b7a <_printf_common+0x8e>
	...

08005bc8 <_printf_i>:
 8005bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	7e0f      	ldrb	r7, [r1, #24]
 8005bce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bd0:	2f78      	cmp	r7, #120	; 0x78
 8005bd2:	4691      	mov	r9, r2
 8005bd4:	4680      	mov	r8, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	469a      	mov	sl, r3
 8005bda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bde:	d807      	bhi.n	8005bf0 <_printf_i+0x28>
 8005be0:	2f62      	cmp	r7, #98	; 0x62
 8005be2:	d80a      	bhi.n	8005bfa <_printf_i+0x32>
 8005be4:	2f00      	cmp	r7, #0
 8005be6:	f000 80d8 	beq.w	8005d9a <_printf_i+0x1d2>
 8005bea:	2f58      	cmp	r7, #88	; 0x58
 8005bec:	f000 80a3 	beq.w	8005d36 <_printf_i+0x16e>
 8005bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bf8:	e03a      	b.n	8005c70 <_printf_i+0xa8>
 8005bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bfe:	2b15      	cmp	r3, #21
 8005c00:	d8f6      	bhi.n	8005bf0 <_printf_i+0x28>
 8005c02:	a101      	add	r1, pc, #4	; (adr r1, 8005c08 <_printf_i+0x40>)
 8005c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c08:	08005c61 	.word	0x08005c61
 8005c0c:	08005c75 	.word	0x08005c75
 8005c10:	08005bf1 	.word	0x08005bf1
 8005c14:	08005bf1 	.word	0x08005bf1
 8005c18:	08005bf1 	.word	0x08005bf1
 8005c1c:	08005bf1 	.word	0x08005bf1
 8005c20:	08005c75 	.word	0x08005c75
 8005c24:	08005bf1 	.word	0x08005bf1
 8005c28:	08005bf1 	.word	0x08005bf1
 8005c2c:	08005bf1 	.word	0x08005bf1
 8005c30:	08005bf1 	.word	0x08005bf1
 8005c34:	08005d81 	.word	0x08005d81
 8005c38:	08005ca5 	.word	0x08005ca5
 8005c3c:	08005d63 	.word	0x08005d63
 8005c40:	08005bf1 	.word	0x08005bf1
 8005c44:	08005bf1 	.word	0x08005bf1
 8005c48:	08005da3 	.word	0x08005da3
 8005c4c:	08005bf1 	.word	0x08005bf1
 8005c50:	08005ca5 	.word	0x08005ca5
 8005c54:	08005bf1 	.word	0x08005bf1
 8005c58:	08005bf1 	.word	0x08005bf1
 8005c5c:	08005d6b 	.word	0x08005d6b
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	1d1a      	adds	r2, r3, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	602a      	str	r2, [r5, #0]
 8005c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0a3      	b.n	8005dbc <_printf_i+0x1f4>
 8005c74:	6820      	ldr	r0, [r4, #0]
 8005c76:	6829      	ldr	r1, [r5, #0]
 8005c78:	0606      	lsls	r6, r0, #24
 8005c7a:	f101 0304 	add.w	r3, r1, #4
 8005c7e:	d50a      	bpl.n	8005c96 <_printf_i+0xce>
 8005c80:	680e      	ldr	r6, [r1, #0]
 8005c82:	602b      	str	r3, [r5, #0]
 8005c84:	2e00      	cmp	r6, #0
 8005c86:	da03      	bge.n	8005c90 <_printf_i+0xc8>
 8005c88:	232d      	movs	r3, #45	; 0x2d
 8005c8a:	4276      	negs	r6, r6
 8005c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c90:	485e      	ldr	r0, [pc, #376]	; (8005e0c <_printf_i+0x244>)
 8005c92:	230a      	movs	r3, #10
 8005c94:	e019      	b.n	8005cca <_printf_i+0x102>
 8005c96:	680e      	ldr	r6, [r1, #0]
 8005c98:	602b      	str	r3, [r5, #0]
 8005c9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c9e:	bf18      	it	ne
 8005ca0:	b236      	sxthne	r6, r6
 8005ca2:	e7ef      	b.n	8005c84 <_printf_i+0xbc>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	6820      	ldr	r0, [r4, #0]
 8005ca8:	1d19      	adds	r1, r3, #4
 8005caa:	6029      	str	r1, [r5, #0]
 8005cac:	0601      	lsls	r1, r0, #24
 8005cae:	d501      	bpl.n	8005cb4 <_printf_i+0xec>
 8005cb0:	681e      	ldr	r6, [r3, #0]
 8005cb2:	e002      	b.n	8005cba <_printf_i+0xf2>
 8005cb4:	0646      	lsls	r6, r0, #25
 8005cb6:	d5fb      	bpl.n	8005cb0 <_printf_i+0xe8>
 8005cb8:	881e      	ldrh	r6, [r3, #0]
 8005cba:	4854      	ldr	r0, [pc, #336]	; (8005e0c <_printf_i+0x244>)
 8005cbc:	2f6f      	cmp	r7, #111	; 0x6f
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2308      	moveq	r3, #8
 8005cc2:	230a      	movne	r3, #10
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cca:	6865      	ldr	r5, [r4, #4]
 8005ccc:	60a5      	str	r5, [r4, #8]
 8005cce:	2d00      	cmp	r5, #0
 8005cd0:	bfa2      	ittt	ge
 8005cd2:	6821      	ldrge	r1, [r4, #0]
 8005cd4:	f021 0104 	bicge.w	r1, r1, #4
 8005cd8:	6021      	strge	r1, [r4, #0]
 8005cda:	b90e      	cbnz	r6, 8005ce0 <_printf_i+0x118>
 8005cdc:	2d00      	cmp	r5, #0
 8005cde:	d04d      	beq.n	8005d7c <_printf_i+0x1b4>
 8005ce0:	4615      	mov	r5, r2
 8005ce2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ce6:	fb03 6711 	mls	r7, r3, r1, r6
 8005cea:	5dc7      	ldrb	r7, [r0, r7]
 8005cec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cf0:	4637      	mov	r7, r6
 8005cf2:	42bb      	cmp	r3, r7
 8005cf4:	460e      	mov	r6, r1
 8005cf6:	d9f4      	bls.n	8005ce2 <_printf_i+0x11a>
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d10b      	bne.n	8005d14 <_printf_i+0x14c>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	07de      	lsls	r6, r3, #31
 8005d00:	d508      	bpl.n	8005d14 <_printf_i+0x14c>
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	6861      	ldr	r1, [r4, #4]
 8005d06:	4299      	cmp	r1, r3
 8005d08:	bfde      	ittt	le
 8005d0a:	2330      	movle	r3, #48	; 0x30
 8005d0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d14:	1b52      	subs	r2, r2, r5
 8005d16:	6122      	str	r2, [r4, #16]
 8005d18:	f8cd a000 	str.w	sl, [sp]
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	aa03      	add	r2, sp, #12
 8005d20:	4621      	mov	r1, r4
 8005d22:	4640      	mov	r0, r8
 8005d24:	f7ff fee2 	bl	8005aec <_printf_common>
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d14c      	bne.n	8005dc6 <_printf_i+0x1fe>
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	b004      	add	sp, #16
 8005d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d36:	4835      	ldr	r0, [pc, #212]	; (8005e0c <_printf_i+0x244>)
 8005d38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d3c:	6829      	ldr	r1, [r5, #0]
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d44:	6029      	str	r1, [r5, #0]
 8005d46:	061d      	lsls	r5, r3, #24
 8005d48:	d514      	bpl.n	8005d74 <_printf_i+0x1ac>
 8005d4a:	07df      	lsls	r7, r3, #31
 8005d4c:	bf44      	itt	mi
 8005d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d52:	6023      	strmi	r3, [r4, #0]
 8005d54:	b91e      	cbnz	r6, 8005d5e <_printf_i+0x196>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	f023 0320 	bic.w	r3, r3, #32
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	2310      	movs	r3, #16
 8005d60:	e7b0      	b.n	8005cc4 <_printf_i+0xfc>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	f043 0320 	orr.w	r3, r3, #32
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	2378      	movs	r3, #120	; 0x78
 8005d6c:	4828      	ldr	r0, [pc, #160]	; (8005e10 <_printf_i+0x248>)
 8005d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d72:	e7e3      	b.n	8005d3c <_printf_i+0x174>
 8005d74:	0659      	lsls	r1, r3, #25
 8005d76:	bf48      	it	mi
 8005d78:	b2b6      	uxthmi	r6, r6
 8005d7a:	e7e6      	b.n	8005d4a <_printf_i+0x182>
 8005d7c:	4615      	mov	r5, r2
 8005d7e:	e7bb      	b.n	8005cf8 <_printf_i+0x130>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	6826      	ldr	r6, [r4, #0]
 8005d84:	6961      	ldr	r1, [r4, #20]
 8005d86:	1d18      	adds	r0, r3, #4
 8005d88:	6028      	str	r0, [r5, #0]
 8005d8a:	0635      	lsls	r5, r6, #24
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	d501      	bpl.n	8005d94 <_printf_i+0x1cc>
 8005d90:	6019      	str	r1, [r3, #0]
 8005d92:	e002      	b.n	8005d9a <_printf_i+0x1d2>
 8005d94:	0670      	lsls	r0, r6, #25
 8005d96:	d5fb      	bpl.n	8005d90 <_printf_i+0x1c8>
 8005d98:	8019      	strh	r1, [r3, #0]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6123      	str	r3, [r4, #16]
 8005d9e:	4615      	mov	r5, r2
 8005da0:	e7ba      	b.n	8005d18 <_printf_i+0x150>
 8005da2:	682b      	ldr	r3, [r5, #0]
 8005da4:	1d1a      	adds	r2, r3, #4
 8005da6:	602a      	str	r2, [r5, #0]
 8005da8:	681d      	ldr	r5, [r3, #0]
 8005daa:	6862      	ldr	r2, [r4, #4]
 8005dac:	2100      	movs	r1, #0
 8005dae:	4628      	mov	r0, r5
 8005db0:	f7fa fa16 	bl	80001e0 <memchr>
 8005db4:	b108      	cbz	r0, 8005dba <_printf_i+0x1f2>
 8005db6:	1b40      	subs	r0, r0, r5
 8005db8:	6060      	str	r0, [r4, #4]
 8005dba:	6863      	ldr	r3, [r4, #4]
 8005dbc:	6123      	str	r3, [r4, #16]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dc4:	e7a8      	b.n	8005d18 <_printf_i+0x150>
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	462a      	mov	r2, r5
 8005dca:	4649      	mov	r1, r9
 8005dcc:	4640      	mov	r0, r8
 8005dce:	47d0      	blx	sl
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d0ab      	beq.n	8005d2c <_printf_i+0x164>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	079b      	lsls	r3, r3, #30
 8005dd8:	d413      	bmi.n	8005e02 <_printf_i+0x23a>
 8005dda:	68e0      	ldr	r0, [r4, #12]
 8005ddc:	9b03      	ldr	r3, [sp, #12]
 8005dde:	4298      	cmp	r0, r3
 8005de0:	bfb8      	it	lt
 8005de2:	4618      	movlt	r0, r3
 8005de4:	e7a4      	b.n	8005d30 <_printf_i+0x168>
 8005de6:	2301      	movs	r3, #1
 8005de8:	4632      	mov	r2, r6
 8005dea:	4649      	mov	r1, r9
 8005dec:	4640      	mov	r0, r8
 8005dee:	47d0      	blx	sl
 8005df0:	3001      	adds	r0, #1
 8005df2:	d09b      	beq.n	8005d2c <_printf_i+0x164>
 8005df4:	3501      	adds	r5, #1
 8005df6:	68e3      	ldr	r3, [r4, #12]
 8005df8:	9903      	ldr	r1, [sp, #12]
 8005dfa:	1a5b      	subs	r3, r3, r1
 8005dfc:	42ab      	cmp	r3, r5
 8005dfe:	dcf2      	bgt.n	8005de6 <_printf_i+0x21e>
 8005e00:	e7eb      	b.n	8005dda <_printf_i+0x212>
 8005e02:	2500      	movs	r5, #0
 8005e04:	f104 0619 	add.w	r6, r4, #25
 8005e08:	e7f5      	b.n	8005df6 <_printf_i+0x22e>
 8005e0a:	bf00      	nop
 8005e0c:	08006165 	.word	0x08006165
 8005e10:	08006176 	.word	0x08006176

08005e14 <memcpy>:
 8005e14:	440a      	add	r2, r1
 8005e16:	4291      	cmp	r1, r2
 8005e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e1c:	d100      	bne.n	8005e20 <memcpy+0xc>
 8005e1e:	4770      	bx	lr
 8005e20:	b510      	push	{r4, lr}
 8005e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e2a:	4291      	cmp	r1, r2
 8005e2c:	d1f9      	bne.n	8005e22 <memcpy+0xe>
 8005e2e:	bd10      	pop	{r4, pc}

08005e30 <memmove>:
 8005e30:	4288      	cmp	r0, r1
 8005e32:	b510      	push	{r4, lr}
 8005e34:	eb01 0402 	add.w	r4, r1, r2
 8005e38:	d902      	bls.n	8005e40 <memmove+0x10>
 8005e3a:	4284      	cmp	r4, r0
 8005e3c:	4623      	mov	r3, r4
 8005e3e:	d807      	bhi.n	8005e50 <memmove+0x20>
 8005e40:	1e43      	subs	r3, r0, #1
 8005e42:	42a1      	cmp	r1, r4
 8005e44:	d008      	beq.n	8005e58 <memmove+0x28>
 8005e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e4e:	e7f8      	b.n	8005e42 <memmove+0x12>
 8005e50:	4402      	add	r2, r0
 8005e52:	4601      	mov	r1, r0
 8005e54:	428a      	cmp	r2, r1
 8005e56:	d100      	bne.n	8005e5a <memmove+0x2a>
 8005e58:	bd10      	pop	{r4, pc}
 8005e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e62:	e7f7      	b.n	8005e54 <memmove+0x24>

08005e64 <_free_r>:
 8005e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e66:	2900      	cmp	r1, #0
 8005e68:	d044      	beq.n	8005ef4 <_free_r+0x90>
 8005e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e6e:	9001      	str	r0, [sp, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f1a1 0404 	sub.w	r4, r1, #4
 8005e76:	bfb8      	it	lt
 8005e78:	18e4      	addlt	r4, r4, r3
 8005e7a:	f000 f913 	bl	80060a4 <__malloc_lock>
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <_free_r+0x94>)
 8005e80:	9801      	ldr	r0, [sp, #4]
 8005e82:	6813      	ldr	r3, [r2, #0]
 8005e84:	b933      	cbnz	r3, 8005e94 <_free_r+0x30>
 8005e86:	6063      	str	r3, [r4, #4]
 8005e88:	6014      	str	r4, [r2, #0]
 8005e8a:	b003      	add	sp, #12
 8005e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e90:	f000 b90e 	b.w	80060b0 <__malloc_unlock>
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	d908      	bls.n	8005eaa <_free_r+0x46>
 8005e98:	6825      	ldr	r5, [r4, #0]
 8005e9a:	1961      	adds	r1, r4, r5
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	bf01      	itttt	eq
 8005ea0:	6819      	ldreq	r1, [r3, #0]
 8005ea2:	685b      	ldreq	r3, [r3, #4]
 8005ea4:	1949      	addeq	r1, r1, r5
 8005ea6:	6021      	streq	r1, [r4, #0]
 8005ea8:	e7ed      	b.n	8005e86 <_free_r+0x22>
 8005eaa:	461a      	mov	r2, r3
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	b10b      	cbz	r3, 8005eb4 <_free_r+0x50>
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	d9fa      	bls.n	8005eaa <_free_r+0x46>
 8005eb4:	6811      	ldr	r1, [r2, #0]
 8005eb6:	1855      	adds	r5, r2, r1
 8005eb8:	42a5      	cmp	r5, r4
 8005eba:	d10b      	bne.n	8005ed4 <_free_r+0x70>
 8005ebc:	6824      	ldr	r4, [r4, #0]
 8005ebe:	4421      	add	r1, r4
 8005ec0:	1854      	adds	r4, r2, r1
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	6011      	str	r1, [r2, #0]
 8005ec6:	d1e0      	bne.n	8005e8a <_free_r+0x26>
 8005ec8:	681c      	ldr	r4, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	6053      	str	r3, [r2, #4]
 8005ece:	4421      	add	r1, r4
 8005ed0:	6011      	str	r1, [r2, #0]
 8005ed2:	e7da      	b.n	8005e8a <_free_r+0x26>
 8005ed4:	d902      	bls.n	8005edc <_free_r+0x78>
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	6003      	str	r3, [r0, #0]
 8005eda:	e7d6      	b.n	8005e8a <_free_r+0x26>
 8005edc:	6825      	ldr	r5, [r4, #0]
 8005ede:	1961      	adds	r1, r4, r5
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	bf04      	itt	eq
 8005ee4:	6819      	ldreq	r1, [r3, #0]
 8005ee6:	685b      	ldreq	r3, [r3, #4]
 8005ee8:	6063      	str	r3, [r4, #4]
 8005eea:	bf04      	itt	eq
 8005eec:	1949      	addeq	r1, r1, r5
 8005eee:	6021      	streq	r1, [r4, #0]
 8005ef0:	6054      	str	r4, [r2, #4]
 8005ef2:	e7ca      	b.n	8005e8a <_free_r+0x26>
 8005ef4:	b003      	add	sp, #12
 8005ef6:	bd30      	pop	{r4, r5, pc}
 8005ef8:	20000214 	.word	0x20000214

08005efc <sbrk_aligned>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	4e0e      	ldr	r6, [pc, #56]	; (8005f38 <sbrk_aligned+0x3c>)
 8005f00:	460c      	mov	r4, r1
 8005f02:	6831      	ldr	r1, [r6, #0]
 8005f04:	4605      	mov	r5, r0
 8005f06:	b911      	cbnz	r1, 8005f0e <sbrk_aligned+0x12>
 8005f08:	f000 f8bc 	bl	8006084 <_sbrk_r>
 8005f0c:	6030      	str	r0, [r6, #0]
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 f8b7 	bl	8006084 <_sbrk_r>
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d00a      	beq.n	8005f30 <sbrk_aligned+0x34>
 8005f1a:	1cc4      	adds	r4, r0, #3
 8005f1c:	f024 0403 	bic.w	r4, r4, #3
 8005f20:	42a0      	cmp	r0, r4
 8005f22:	d007      	beq.n	8005f34 <sbrk_aligned+0x38>
 8005f24:	1a21      	subs	r1, r4, r0
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 f8ac 	bl	8006084 <_sbrk_r>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d101      	bne.n	8005f34 <sbrk_aligned+0x38>
 8005f30:	f04f 34ff 	mov.w	r4, #4294967295
 8005f34:	4620      	mov	r0, r4
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	20000218 	.word	0x20000218

08005f3c <_malloc_r>:
 8005f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f40:	1ccd      	adds	r5, r1, #3
 8005f42:	f025 0503 	bic.w	r5, r5, #3
 8005f46:	3508      	adds	r5, #8
 8005f48:	2d0c      	cmp	r5, #12
 8005f4a:	bf38      	it	cc
 8005f4c:	250c      	movcc	r5, #12
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	4607      	mov	r7, r0
 8005f52:	db01      	blt.n	8005f58 <_malloc_r+0x1c>
 8005f54:	42a9      	cmp	r1, r5
 8005f56:	d905      	bls.n	8005f64 <_malloc_r+0x28>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	2600      	movs	r6, #0
 8005f5e:	4630      	mov	r0, r6
 8005f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f64:	4e2e      	ldr	r6, [pc, #184]	; (8006020 <_malloc_r+0xe4>)
 8005f66:	f000 f89d 	bl	80060a4 <__malloc_lock>
 8005f6a:	6833      	ldr	r3, [r6, #0]
 8005f6c:	461c      	mov	r4, r3
 8005f6e:	bb34      	cbnz	r4, 8005fbe <_malloc_r+0x82>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4638      	mov	r0, r7
 8005f74:	f7ff ffc2 	bl	8005efc <sbrk_aligned>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	d14d      	bne.n	800601a <_malloc_r+0xde>
 8005f7e:	6834      	ldr	r4, [r6, #0]
 8005f80:	4626      	mov	r6, r4
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	d140      	bne.n	8006008 <_malloc_r+0xcc>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	4631      	mov	r1, r6
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	eb04 0803 	add.w	r8, r4, r3
 8005f90:	f000 f878 	bl	8006084 <_sbrk_r>
 8005f94:	4580      	cmp	r8, r0
 8005f96:	d13a      	bne.n	800600e <_malloc_r+0xd2>
 8005f98:	6821      	ldr	r1, [r4, #0]
 8005f9a:	3503      	adds	r5, #3
 8005f9c:	1a6d      	subs	r5, r5, r1
 8005f9e:	f025 0503 	bic.w	r5, r5, #3
 8005fa2:	3508      	adds	r5, #8
 8005fa4:	2d0c      	cmp	r5, #12
 8005fa6:	bf38      	it	cc
 8005fa8:	250c      	movcc	r5, #12
 8005faa:	4629      	mov	r1, r5
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7ff ffa5 	bl	8005efc <sbrk_aligned>
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d02b      	beq.n	800600e <_malloc_r+0xd2>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	442b      	add	r3, r5
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	e00e      	b.n	8005fdc <_malloc_r+0xa0>
 8005fbe:	6822      	ldr	r2, [r4, #0]
 8005fc0:	1b52      	subs	r2, r2, r5
 8005fc2:	d41e      	bmi.n	8006002 <_malloc_r+0xc6>
 8005fc4:	2a0b      	cmp	r2, #11
 8005fc6:	d916      	bls.n	8005ff6 <_malloc_r+0xba>
 8005fc8:	1961      	adds	r1, r4, r5
 8005fca:	42a3      	cmp	r3, r4
 8005fcc:	6025      	str	r5, [r4, #0]
 8005fce:	bf18      	it	ne
 8005fd0:	6059      	strne	r1, [r3, #4]
 8005fd2:	6863      	ldr	r3, [r4, #4]
 8005fd4:	bf08      	it	eq
 8005fd6:	6031      	streq	r1, [r6, #0]
 8005fd8:	5162      	str	r2, [r4, r5]
 8005fda:	604b      	str	r3, [r1, #4]
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f104 060b 	add.w	r6, r4, #11
 8005fe2:	f000 f865 	bl	80060b0 <__malloc_unlock>
 8005fe6:	f026 0607 	bic.w	r6, r6, #7
 8005fea:	1d23      	adds	r3, r4, #4
 8005fec:	1af2      	subs	r2, r6, r3
 8005fee:	d0b6      	beq.n	8005f5e <_malloc_r+0x22>
 8005ff0:	1b9b      	subs	r3, r3, r6
 8005ff2:	50a3      	str	r3, [r4, r2]
 8005ff4:	e7b3      	b.n	8005f5e <_malloc_r+0x22>
 8005ff6:	6862      	ldr	r2, [r4, #4]
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	bf0c      	ite	eq
 8005ffc:	6032      	streq	r2, [r6, #0]
 8005ffe:	605a      	strne	r2, [r3, #4]
 8006000:	e7ec      	b.n	8005fdc <_malloc_r+0xa0>
 8006002:	4623      	mov	r3, r4
 8006004:	6864      	ldr	r4, [r4, #4]
 8006006:	e7b2      	b.n	8005f6e <_malloc_r+0x32>
 8006008:	4634      	mov	r4, r6
 800600a:	6876      	ldr	r6, [r6, #4]
 800600c:	e7b9      	b.n	8005f82 <_malloc_r+0x46>
 800600e:	230c      	movs	r3, #12
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	4638      	mov	r0, r7
 8006014:	f000 f84c 	bl	80060b0 <__malloc_unlock>
 8006018:	e7a1      	b.n	8005f5e <_malloc_r+0x22>
 800601a:	6025      	str	r5, [r4, #0]
 800601c:	e7de      	b.n	8005fdc <_malloc_r+0xa0>
 800601e:	bf00      	nop
 8006020:	20000214 	.word	0x20000214

08006024 <_realloc_r>:
 8006024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006028:	4680      	mov	r8, r0
 800602a:	4614      	mov	r4, r2
 800602c:	460e      	mov	r6, r1
 800602e:	b921      	cbnz	r1, 800603a <_realloc_r+0x16>
 8006030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006034:	4611      	mov	r1, r2
 8006036:	f7ff bf81 	b.w	8005f3c <_malloc_r>
 800603a:	b92a      	cbnz	r2, 8006048 <_realloc_r+0x24>
 800603c:	f7ff ff12 	bl	8005e64 <_free_r>
 8006040:	4625      	mov	r5, r4
 8006042:	4628      	mov	r0, r5
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	f000 f838 	bl	80060bc <_malloc_usable_size_r>
 800604c:	4284      	cmp	r4, r0
 800604e:	4607      	mov	r7, r0
 8006050:	d802      	bhi.n	8006058 <_realloc_r+0x34>
 8006052:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006056:	d812      	bhi.n	800607e <_realloc_r+0x5a>
 8006058:	4621      	mov	r1, r4
 800605a:	4640      	mov	r0, r8
 800605c:	f7ff ff6e 	bl	8005f3c <_malloc_r>
 8006060:	4605      	mov	r5, r0
 8006062:	2800      	cmp	r0, #0
 8006064:	d0ed      	beq.n	8006042 <_realloc_r+0x1e>
 8006066:	42bc      	cmp	r4, r7
 8006068:	4622      	mov	r2, r4
 800606a:	4631      	mov	r1, r6
 800606c:	bf28      	it	cs
 800606e:	463a      	movcs	r2, r7
 8006070:	f7ff fed0 	bl	8005e14 <memcpy>
 8006074:	4631      	mov	r1, r6
 8006076:	4640      	mov	r0, r8
 8006078:	f7ff fef4 	bl	8005e64 <_free_r>
 800607c:	e7e1      	b.n	8006042 <_realloc_r+0x1e>
 800607e:	4635      	mov	r5, r6
 8006080:	e7df      	b.n	8006042 <_realloc_r+0x1e>
	...

08006084 <_sbrk_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4d06      	ldr	r5, [pc, #24]	; (80060a0 <_sbrk_r+0x1c>)
 8006088:	2300      	movs	r3, #0
 800608a:	4604      	mov	r4, r0
 800608c:	4608      	mov	r0, r1
 800608e:	602b      	str	r3, [r5, #0]
 8006090:	f7fa ffac 	bl	8000fec <_sbrk>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d102      	bne.n	800609e <_sbrk_r+0x1a>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	b103      	cbz	r3, 800609e <_sbrk_r+0x1a>
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	2000021c 	.word	0x2000021c

080060a4 <__malloc_lock>:
 80060a4:	4801      	ldr	r0, [pc, #4]	; (80060ac <__malloc_lock+0x8>)
 80060a6:	f000 b811 	b.w	80060cc <__retarget_lock_acquire_recursive>
 80060aa:	bf00      	nop
 80060ac:	20000220 	.word	0x20000220

080060b0 <__malloc_unlock>:
 80060b0:	4801      	ldr	r0, [pc, #4]	; (80060b8 <__malloc_unlock+0x8>)
 80060b2:	f000 b80c 	b.w	80060ce <__retarget_lock_release_recursive>
 80060b6:	bf00      	nop
 80060b8:	20000220 	.word	0x20000220

080060bc <_malloc_usable_size_r>:
 80060bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c0:	1f18      	subs	r0, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	bfbc      	itt	lt
 80060c6:	580b      	ldrlt	r3, [r1, r0]
 80060c8:	18c0      	addlt	r0, r0, r3
 80060ca:	4770      	bx	lr

080060cc <__retarget_lock_acquire_recursive>:
 80060cc:	4770      	bx	lr

080060ce <__retarget_lock_release_recursive>:
 80060ce:	4770      	bx	lr

080060d0 <_init>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	bf00      	nop
 80060d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d6:	bc08      	pop	{r3}
 80060d8:	469e      	mov	lr, r3
 80060da:	4770      	bx	lr

080060dc <_fini>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	bf00      	nop
 80060e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e2:	bc08      	pop	{r3}
 80060e4:	469e      	mov	lr, r3
 80060e6:	4770      	bx	lr
